export const data = JSON.parse("{\"key\":\"v-2acde81b\",\"path\":\"/interview/concurrent.html\",\"title\":\"线程\",\"lang\":\"en-US\",\"frontmatter\":{\"summary\":\"线程; 多线程中的 i++线程安全吗？为什么？; 如何线程安全的实现一个计数器？; 多线程同步的方法; 介绍一下生产者消费者模式？; 线程，进程，然后线程创建有很大开销，怎么优化？; 线程池; AQS; 创建线程的方法，哪个更好，为什么？; Java 中有几种方式启动一个线程？; CountDownLatch，CyclicBarrier，Semaphore，\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://www.bmrs.top/interview/concurrent.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"编码人生\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"线程\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"en-US\"}]]},\"excerpt\":\"\",\"headers\":[{\"level\":2,\"title\":\"多线程中的 i++线程安全吗？为什么？\",\"slug\":\"多线程中的-i-线程安全吗-为什么\",\"link\":\"#多线程中的-i-线程安全吗-为什么\",\"children\":[]},{\"level\":2,\"title\":\"如何线程安全的实现一个计数器？\",\"slug\":\"如何线程安全的实现一个计数器\",\"link\":\"#如何线程安全的实现一个计数器\",\"children\":[]},{\"level\":2,\"title\":\"多线程同步的方法\",\"slug\":\"多线程同步的方法\",\"link\":\"#多线程同步的方法\",\"children\":[]},{\"level\":2,\"title\":\"介绍一下生产者消费者模式？\",\"slug\":\"介绍一下生产者消费者模式\",\"link\":\"#介绍一下生产者消费者模式\",\"children\":[]},{\"level\":2,\"title\":\"线程，进程，然后线程创建有很大开销，怎么优化？\",\"slug\":\"线程-进程-然后线程创建有很大开销-怎么优化\",\"link\":\"#线程-进程-然后线程创建有很大开销-怎么优化\",\"children\":[]},{\"level\":2,\"title\":\"线程池\",\"slug\":\"线程池\",\"link\":\"#线程池\",\"children\":[]},{\"level\":2,\"title\":\"AQS\",\"slug\":\"aqs\",\"link\":\"#aqs\",\"children\":[]},{\"level\":2,\"title\":\"创建线程的方法，哪个更好，为什么？\",\"slug\":\"创建线程的方法-哪个更好-为什么\",\"link\":\"#创建线程的方法-哪个更好-为什么\",\"children\":[]},{\"level\":2,\"title\":\"Java 中有几种方式启动一个线程？\",\"slug\":\"java-中有几种方式启动一个线程\",\"link\":\"#java-中有几种方式启动一个线程\",\"children\":[]},{\"level\":2,\"title\":\"CountDownLatch，CyclicBarrier，Semaphore，CountDownLatch\",\"slug\":\"countdownlatch-cyclicbarrier-semaphore-countdownlatch\",\"link\":\"#countdownlatch-cyclicbarrier-semaphore-countdownlatch\",\"children\":[]},{\"level\":2,\"title\":\"如何理解 Java 多线程回调方法？\",\"slug\":\"如何理解-java-多线程回调方法\",\"link\":\"#如何理解-java-多线程回调方法\",\"children\":[]},{\"level\":2,\"title\":\"概括的解释下线程的几种可用状态以及状态之间的关系\",\"slug\":\"概括的解释下线程的几种可用状态以及状态之间的关系\",\"link\":\"#概括的解释下线程的几种可用状态以及状态之间的关系\",\"children\":[]},{\"level\":2,\"title\":\"同步方法和同步代码块的区别是什么？\",\"slug\":\"同步方法和同步代码块的区别是什么\",\"link\":\"#同步方法和同步代码块的区别是什么\",\"children\":[]},{\"level\":2,\"title\":\"在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？\",\"slug\":\"在监视器-monitor-内部-是如何做线程同步的-程序应该做哪种级别的同步\",\"link\":\"#在监视器-monitor-内部-是如何做线程同步的-程序应该做哪种级别的同步\",\"children\":[]},{\"level\":2,\"title\":\"sleep() 和 wait() 有什么区别？\",\"slug\":\"sleep-和-wait-有什么区别\",\"link\":\"#sleep-和-wait-有什么区别\",\"children\":[]},{\"level\":2,\"title\":\"同步和异步有何异同，在什么情况下分别使用他们？举例说明\",\"slug\":\"同步和异步有何异同-在什么情况下分别使用他们-举例说明\",\"link\":\"#同步和异步有何异同-在什么情况下分别使用他们-举例说明\",\"children\":[]},{\"level\":2,\"title\":\"设计 4 个线程，其中两个线程每次对 j 增加 1，另外两个线程对 j 每次减少 1，使用内部类实现线程，对 j 增减的时候没有考虑顺序问题\",\"slug\":\"设计-4-个线程-其中两个线程每次对-j-增加-1-另外两个线程对-j-每次减少-1-使用内部类实现线程-对-j-增减的时候没有考虑顺序问题\",\"link\":\"#设计-4-个线程-其中两个线程每次对-j-增加-1-另外两个线程对-j-每次减少-1-使用内部类实现线程-对-j-增减的时候没有考虑顺序问题\",\"children\":[]},{\"level\":2,\"title\":\"启动一个线程是用 run()还是 start()?\",\"slug\":\"启动一个线程是用-run-还是-start\",\"link\":\"#启动一个线程是用-run-还是-start\",\"children\":[]},{\"level\":2,\"title\":\"请说出你所知道的线程同步的方法\",\"slug\":\"请说出你所知道的线程同步的方法\",\"link\":\"#请说出你所知道的线程同步的方法\",\"children\":[]},{\"level\":2,\"title\":\"stop()和 suspend()方法为何不推荐使用？\",\"slug\":\"stop-和-suspend-方法为何不推荐使用\",\"link\":\"#stop-和-suspend-方法为何不推荐使用\",\"children\":[]},{\"level\":2,\"title\":\"线程的 sleep()方法和 yield()方法有什么区别？\",\"slug\":\"线程的-sleep-方法和-yield-方法有什么区别\",\"link\":\"#线程的-sleep-方法和-yield-方法有什么区别\",\"children\":[]},{\"level\":2,\"title\":\"当一个线程进入一个对象的 synchronized 方法 A 之后，其它线程是否可进入此对象的 synchronized 方法 B？\",\"slug\":\"当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b\",\"link\":\"#当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b\",\"children\":[]},{\"level\":2,\"title\":\"锁总结\",\"slug\":\"锁总结\",\"link\":\"#锁总结\",\"children\":[{\"level\":3,\"title\":\"乐观锁 VS 悲观锁\",\"slug\":\"乐观锁-vs-悲观锁\",\"link\":\"#乐观锁-vs-悲观锁\",\"children\":[]},{\"level\":3,\"title\":\"自旋锁 VS 适应性自旋锁\",\"slug\":\"自旋锁-vs-适应性自旋锁\",\"link\":\"#自旋锁-vs-适应性自旋锁\",\"children\":[]},{\"level\":3,\"title\":\"无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁\",\"slug\":\"无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁\",\"link\":\"#无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁\",\"children\":[]},{\"level\":3,\"title\":\"公平锁 VS 非公平锁\",\"slug\":\"公平锁-vs-非公平锁\",\"link\":\"#公平锁-vs-非公平锁\",\"children\":[]},{\"level\":3,\"title\":\"可重入锁 VS 非可重入锁\",\"slug\":\"可重入锁-vs-非可重入锁\",\"link\":\"#可重入锁-vs-非可重入锁\",\"children\":[]},{\"level\":3,\"title\":\"独享锁 VS 共享锁\",\"slug\":\"独享锁-vs-共享锁\",\"link\":\"#独享锁-vs-共享锁\",\"children\":[]}]},{\"level\":2,\"title\":\"讲一下非公平锁和公平锁在 reetrantlock 里的实现\",\"slug\":\"讲一下非公平锁和公平锁在-reetrantlock-里的实现\",\"link\":\"#讲一下非公平锁和公平锁在-reetrantlock-里的实现\",\"children\":[]},{\"level\":2,\"title\":\"讲一下 synchronized，可重入怎么实现\",\"slug\":\"讲一下-synchronized-可重入怎么实现\",\"link\":\"#讲一下-synchronized-可重入怎么实现\",\"children\":[]},{\"level\":2,\"title\":\"锁和同步的区别\",\"slug\":\"锁和同步的区别\",\"link\":\"#锁和同步的区别\",\"children\":[]},{\"level\":2,\"title\":\"什么是死锁(deadlock)？\",\"slug\":\"什么是死锁-deadlock\",\"link\":\"#什么是死锁-deadlock\",\"children\":[]},{\"level\":2,\"title\":\"如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？\",\"slug\":\"如何确保-n-个线程可以访问-n-个资源同时又不导致死锁\",\"link\":\"#如何确保-n-个线程可以访问-n-个资源同时又不导致死锁\",\"children\":[]},{\"level\":2,\"title\":\"ReentrantLock 中公平锁和非公平锁在哪里体现的？\",\"slug\":\"reentrantlock-中公平锁和非公平锁在哪里体现的\",\"link\":\"#reentrantlock-中公平锁和非公平锁在哪里体现的\",\"children\":[]},{\"level\":2,\"title\":\"volatile 的实现原理\",\"slug\":\"volatile-的实现原理\",\"link\":\"#volatile-的实现原理\",\"children\":[]},{\"level\":2,\"title\":\"java 内存模型\",\"slug\":\"java-内存模型\",\"link\":\"#java-内存模型\",\"children\":[]},{\"level\":2,\"title\":\"synchronized 底层原理\",\"slug\":\"synchronized-底层原理\",\"link\":\"#synchronized-底层原理\",\"children\":[]},{\"level\":2,\"title\":\"java 对象头\",\"slug\":\"java-对象头\",\"link\":\"#java-对象头\",\"children\":[]},{\"level\":2,\"title\":\"Monitor\",\"slug\":\"monitor\",\"link\":\"#monitor\",\"children\":[]},{\"level\":2,\"title\":\"Executors 线程池，为什么不建议使用这个类来创建线程池呢？如何创建？\",\"slug\":\"executors-线程池-为什么不建议使用这个类来创建线程池呢-如何创建\",\"link\":\"#executors-线程池-为什么不建议使用这个类来创建线程池呢-如何创建\",\"children\":[]},{\"level\":2,\"title\":\"阻塞队列\",\"slug\":\"阻塞队列\",\"link\":\"#阻塞队列\",\"children\":[{\"level\":3,\"title\":\"ArrayBlockingQueue\",\"slug\":\"arrayblockingqueue\",\"link\":\"#arrayblockingqueue\",\"children\":[]},{\"level\":3,\"title\":\"LinkedBlockingQueue\",\"slug\":\"linkedblockingqueue\",\"link\":\"#linkedblockingqueue\",\"children\":[]},{\"level\":3,\"title\":\"二者对比\",\"slug\":\"二者对比\",\"link\":\"#二者对比\",\"children\":[]}]}],\"readingTime\":{\"minutes\":56.86,\"words\":17059},\"filePathRelative\":\"interview/concurrent.md\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
