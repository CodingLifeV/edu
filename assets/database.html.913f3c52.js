import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as r,f as o,a,b as n,d as s,e as l,r as p}from"./app.a00c762e.js";const d={},c=l('<ul><li><a href="#sql-%E5%9F%BA%E7%A1%80">SQL 基础</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C">数据库基本操作</a></li></ul></li><li><a href="#jdbc-%E5%9F%BA%E7%A1%80">JDBC 基础</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B0%B4%E5%B9%B3%E5%88%87%E5%88%86%E5%9E%82%E7%9B%B4%E5%88%87%E5%88%86">数据库水平切分，垂直切分</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%A4%E7%A7%8D%E5%BC%95%E6%93%8E%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8-innodb-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8-myisam%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C-myisam-%E6%AF%94-innodb-%E5%BF%AB">数据库两种引擎以及区别？介绍一下什么时候用 Innodb 什么时候用 MyISAM。为什么查询操作 MyISAM 比 Innodb 快？</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%B8%BB%E9%94%AE%E5%92%8C%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB">数据库索引介绍一下。主键和索引的区别？</a></li><li><a href="#%E7%B4%A2%E5%BC%95%E4%BA%86%E8%A7%A3%E5%98%9B%E5%BA%95%E5%B1%82%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E5%A4%B1%E6%95%88%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9">索引了解嘛，底层怎么实现的，什么时候会失效，索引使用的注意点</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">数据库的隔离级别</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E8%8C%83%E5%BC%8F">数据库的三范式？</a></li><li><a href="#%E8%AE%B2%E4%B8%80%E4%B8%8B%E6%95%B0%E6%8D%AE%E5%BA%93-acid-%E7%9A%84%E7%89%B9%E6%80%A7">讲一下数据库 ACID 的特性？</a></li><li><a href="#mysql-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">mysql 主从复制？</a></li><li><a href="#leftjoin-%E5%92%8C-rightjoin-%E7%9A%84%E5%8C%BA%E5%88%AB">leftjoin 和 rightjoin 的区别？</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95">数据库优化方法</a></li><li><a href="#%E6%85%A2%E6%97%A5%E5%BF%97explain-%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90-sql-%E8%AF%AD%E5%8F%A5%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96">慢日志+explain 查询分析 SQL 语句进行优化</a></li><li><a href="#mysql-%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">MySQL 字段类型</a></li><li><a href="#mysql-%E5%AF%B9%E4%BA%8E%E5%A4%A7%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AD%98%E5%82%A8">MySQL 对于大字段的存储</a></li><li><a href="#text-blob-varchar-%E5%BE%88%E9%95%BF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96">text blob varchar 很长，如何存储以及优化</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84">数据库架构</a></li><li><a href="#%E8%B0%88%E4%B8%80%E4%B8%8B%E4%BD%A0%E5%AF%B9%E7%BB%A7%E6%89%BF%E6%98%A0%E5%B0%84%E7%9A%84%E7%90%86%E8%A7%A3">谈一下你对继承映射的理解。</a></li><li><a href="#%E8%AF%B4%E5%87%BA%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">说出数据连接池的工作机制是什么?</a></li><li><a href="#jdbc-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86">JDBC 中如何进行事务处理？</a></li><li><a href="#sql-%E6%B3%A8%E5%85%A5">SQL 注入？</a></li><li><a href="#%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E6%9F%A5%E7%9A%84%E5%BF%AB%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E9%9C%80%E8%A6%81%E7%B4%A2%E5%BC%95%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">索引为什么能查的快？为什么而需要索引？索引的优缺点？</a></li><li><a href="#%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8-b-%E6%A0%91%E6%88%96%E8%80%85%E7%BA%A2%E9%BB%91%E6%A0%91">索引的底层使用什么实现的，为什么不用 B 树或者红黑树？</a></li><li><a href="#redoundocheckpoint">redo？undo？checkpoint？</a></li><li><a href="#mysql-%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E5%85%88%E5%B0%86%E6%95%B0%E6%8D%AE%E5%86%99%E5%88%B0-buffer-%E9%87%8C%E5%86%8D%E5%86%99%E5%88%B0%E7%A3%81%E7%9B%98%E9%87%8C%E4%B8%87%E4%B8%80-mysql-%E8%BF%99%E6%97%B6%E5%80%99%E7%AA%81%E7%84%B6%E6%8C%82%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E">mysql 写数据的时候,需要先将数据写到 buffer 里,再写到磁盘里,万一 MySQL 这时候突然挂了,怎么办?</a></li><li><a href="#where-%E5%92%8C-having-by-%E5%8C%BA%E5%88%AB">where 和 having by 区别</a></li><li><a href="#%E6%A0%91%E6%80%BB%E7%BB%93">树总结</a></li></ul></li><li><a href="#jdbc-%E8%BF%9B%E9%98%B6">JDBC 进阶</a><ul><li><a href="#jdbc-%E7%9A%84%E5%8F%8D%E5%B0%84%E5%8F%8D%E5%B0%84%E9%83%BD%E6%98%AF%E4%BB%80%E4%B9%88">JDBC 的反射，反射都是什么？</a></li><li><a href="#jdo-%E6%98%AF%E4%BB%80%E4%B9%88">Jdo 是什么?</a></li><li><a href="#statement-%E5%92%8C-preparedstatement-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%93%AA%E4%B8%AA%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD">Statement 和 PreparedStatement 有什么区别？哪个性能更好？</a></li><li><a href="#%E4%BD%BF%E7%94%A8-jdbc-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E6%80%A7%E8%83%BD">使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E6%89%A9%E5%B1%95">数据库优化扩展</a><ul><li><a href="#%E7%B4%A2%E5%BC%95">索引</a></li><li><a href="#btree-%E7%B4%A2%E5%BC%95%E5%92%8C-hash-%E7%B4%A2%E5%BC%95%E5%8C%BA%E5%88%AB">B+Tree 索引和 Hash 索引区别</a></li><li><a href="#%E9%9D%9E%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E6%97%B6%E6%98%AF%E5%90%A6%E6%AF%8F%E6%AC%A1%E9%9C%80%E8%A6%81%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%A4%9A%E6%AC%A1%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95%E7%9A%84%E6%A6%82%E5%BF%B5">非主键索引查询数据时是否每次需要回表查询多次，覆盖索引的概念</a></li><li><a href="#%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E9%A1%BA%E5%BA%8F%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9">联合索引多个字段顺序如何选择</a></li><li><a href="#%E7%BA%BF%E4%B8%8A-mysql-%E7%89%88%E6%9C%ACmysql56-%E4%B8%AD%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E5%8C%96%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8icp%E5%8E%9F%E7%90%86">线上 MySQL 版本，MySQL5.6 中索引的优化索引下推(ICP)原理</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8">查询优化器</a></li><li><a href="#mysql-%E9%94%81">MySQL 锁</a><ul><li><a href="#%E5%85%B1%E4%BA%AB%E9%94%81s-%E9%94%81%E5%92%8C%E6%8E%92%E4%BB%96%E9%94%81x-%E9%94%81">共享锁(S 锁)和排他锁(X 锁)</a></li><li><a href="#%E6%84%8F%E5%90%91%E9%94%81">意向锁</a></li><li><a href="#%E6%8F%92%E5%85%A5%E6%84%8F%E5%90%91%E9%94%81">插入意向锁</a></li><li><a href="#%E8%AE%B0%E5%BD%95%E9%94%81">记录锁</a></li><li><a href="#%E9%97%B4%E9%9A%99%E9%94%81gap-%E9%94%81">间隙锁(gap 锁)</a></li><li><a href="#%E4%B8%B4%E9%94%AE%E9%94%81next-key-locks">临键锁(Next-Key Locks)</a></li></ul></li><li><a href="#dml-%E5%92%8C-ddl-%E8%AF%AD%E5%8F%A5">DML 和 DDL 语句</a></li><li><a href="#mvcc">MVCC</a></li><li><a href="#innodb-%E4%B8%AD%E5%B8%B8%E8%A7%81-sql-%E8%AF%AD%E5%8F%A5%E8%AE%BE%E7%BD%AE%E7%9A%84%E9%94%81%E7%B1%BB%E5%9E%8B">Innodb 中常见 SQL 语句设置的锁类型</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B-innodb-%E5%8A%A0%E8%A1%A8%E9%94%81">什么情况下 innodb 加表锁</a></li><li><a href="#mysql-%E7%B4%A2%E5%BC%95%E5%91%BD%E4%B8%AD%E8%A7%84%E5%88%99">MySQL 索引命中规则</a></li></ul></li><li><a href="#sql-%E8%AF%AD%E5%8F%A5">Sql 语句</a><ul><li><a href="#%E4%B8%80%E5%8D%95%E8%A1%A8%E6%93%8D%E4%BD%9C">一、单表操作</a><ul><li><a href="#1-%E6%9F%A5%E6%89%BE%E6%9C%80%E6%99%9A%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">1. 查找最晚入职员工的所有信息</a><ul><li><a href="#max"><code>max()</code></a></li></ul></li><li><a href="#2%E6%9F%A5%E6%89%BE%E5%85%A5%E8%81%8C%E5%91%98%E5%B7%A5%E6%97%B6%E9%97%B4%E6%8E%92%E5%90%8D%E5%80%92%E6%95%B0%E7%AC%AC%E4%B8%89%E7%9A%84%E5%91%98%E5%B7%A5%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">2.查找入职员工时间排名倒数第三的员工所有信息</a><ul><li><a href="#select-distinct"><code>select distinct</code></a></li><li><a href="#order-by"><code>order by</code></a></li><li><a href="#limit-mn"><code>limit m,n</code></a></li><li><a href="#limit-n"><code>limit n</code></a></li></ul></li><li><a href="#3-%E6%9F%A5%E6%89%BE%E8%96%AA%E6%B0%B4%E6%B6%A8%E5%B9%85%E8%B6%85%E8%BF%87-15-%E6%AC%A1%E7%9A%84%E5%91%98%E5%B7%A5%E5%8F%B7-emp_no-%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E6%B6%A8%E5%B9%85%E6%AC%A1%E6%95%B0-t">3. 查找薪水涨幅超过 15 次的员工号 emp_no 以及其对应的涨幅次数 t</a><ul><li><a href="#count"><code>count(*)</code></a></li><li><a href="#countcolumn_name"><code>count(column_name)</code></a></li><li><a href="#having"><code>having</code></a></li><li><a href="#group-by"><code>group by</code></a></li></ul></li><li><a href="#4-%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%BD%93%E5%89%8Dto_date9999-01-01%E5%85%B7%E4%BD%93%E7%9A%84%E8%96%AA%E6%B0%B4-salary-%E6%83%85%E5%86%B5%E5%AF%B9%E4%BA%8E%E7%9B%B8%E5%90%8C%E7%9A%84%E8%96%AA%E6%B0%B4%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E6%AC%A1%E5%B9%B6%E6%8C%89%E7%85%A7%E9%80%86%E5%BA%8F%E6%98%BE%E7%A4%BA">4. 找出所有员工当前(to_date=&#39;9999-01-01&#39;)具体的薪水 salary 情况，对于相同的薪水只显示一次,并按照逆序显示</a><ul><li><a href="#order-by">order by</a></li><li><a href="#group-by-%E4%BB%A3%E6%9B%BF-distinct"><code>group by</code> 代替 <code>distinct</code></a></li></ul></li><li><a href="#5-%E4%BB%8E-titles-%E8%A1%A8%E8%8E%B7%E5%8F%96%E6%8C%89%E7%85%A7-title-%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84%E6%AF%8F%E7%BB%84%E4%B8%AA%E6%95%B0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E-2%E7%BB%99%E5%87%BA-title-%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E7%9B%AE-t">5. 从 titles 表获取按照 title 进行分组，每组个数大于等于 2，给出 title 以及对应的数目 t。</a><ul><li><a href="#countgroup-by%E5%92%8C-having-%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8"><code>count</code>、<code>group by</code>和 <code>having</code> 搭配使用</a></li></ul></li><li><a href="#6-%E4%BB%8E-titles-%E8%A1%A8%E8%8E%B7%E5%8F%96%E6%8C%89%E7%85%A7-title-%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84%E6%AF%8F%E7%BB%84%E4%B8%AA%E6%95%B0%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E-2%E7%BB%99%E5%87%BA-title-%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E7%9B%AE-t%E6%B3%A8%E6%84%8F%E5%AF%B9%E4%BA%8E%E9%87%8D%E5%A4%8D%E7%9A%84-emp_no-%E8%BF%9B%E8%A1%8C%E5%BF%BD%E7%95%A5">6. 从 titles 表获取按照 title 进行分组，每组个数大于等于 2，给出 title 以及对应的数目 t。注意对于重复的 emp_no 进行忽略。</a><ul><li><a href="#count-%E5%86%85%E9%83%A8%E6%90%AD%E9%85%8D-distinct-%E4%BD%BF%E7%94%A8"><code>count</code> 内部搭配 <code>distinct</code> 使用</a></li></ul></li><li><a href="#7-%E6%9F%A5%E6%89%BE-employees-%E8%A1%A8%E6%89%80%E6%9C%89-emp_no-%E4%B8%BA%E5%A5%87%E6%95%B0%E4%B8%94-last_name-%E4%B8%8D%E4%B8%BA-mary-%E7%9A%84%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E5%B9%B6%E6%8C%89%E7%85%A7-hire_date-%E9%80%86%E5%BA%8F%E6%8E%92%E5%88%97">7. 查找 employees 表所有 emp_no 为奇数，且 last_name 不为 Mary 的员工信息，并按照 hire_date 逆序排列</a><ul><li><a href="#where-%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD">where 中使用条件判断</a></li></ul></li><li><a href="#8-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8Dto_date9999-01-01%E8%96%AA%E6%B0%B4%E7%AC%AC%E4%BA%8C%E5%A4%9A%E7%9A%84%E5%91%98%E5%B7%A5%E7%9A%84emp_no%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E8%96%AA%E6%B0%B4salary">8. 获取当前（to_date=&#39;9999-01-01&#39;）薪水第二多的员工的emp_no以及其对应的薪水salary</a><ul><li><a href="#order-bylimit-mn">order by、limit m,n</a></li></ul></li></ul></li><li><a href="#%E4%BA%8C%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C">二、多表操作</a><ul><li><a href="#1-%E6%9F%A5%E6%89%BE%E5%90%84%E4%B8%AA%E9%83%A8%E9%97%A8%E5%BD%93%E5%89%8Dto_date9999-01-01%E9%A2%86%E5%AF%BC%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E8%AF%A6%E6%83%85%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E9%83%A8%E9%97%A8%E7%BC%96%E5%8F%B7">1. 查找各个部门当前(to_date=&#39;9999-01-01&#39;)领导当前薪水详情以及其对应部门编号</a><ul><li><a href="#join"><code>join</code></a></li></ul></li><li><a href="#2-%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5%E7%9A%84-last_name-%E5%92%8C-first_name">2. 查找所有已经分配部门的员工的 last_name 和 first_name</a><ul><li><a href="#inner-join"><code>inner join</code></a></li></ul></li><li><a href="#3-%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84-last_name-%E5%92%8C-first_name-%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E9%83%A8%E9%97%A8%E7%BC%96%E5%8F%B7-dept_no%E4%B9%9F%E5%8C%85%E6%8B%AC%E5%B1%95%E7%A4%BA%E6%B2%A1%E6%9C%89%E5%88%86%E9%85%8D%E5%85%B7%E4%BD%93%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5">3. 查找所有员工的 last_name 和 first_name 以及对应部门编号 dept_no，也包括展示没有分配具体部门的员工</a><ul><li><a href="#left-join"><code>left join</code></a></li></ul></li><li><a href="#4-%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%85%A5%E8%81%8C%E6%97%B6%E5%80%99%E7%9A%84%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5%E7%BB%99%E5%87%BA-emp_no-%E4%BB%A5%E5%8F%8A-salary-%E5%B9%B6%E6%8C%89%E7%85%A7-emp_no-%E8%BF%9B%E8%A1%8C%E9%80%86%E5%BA%8F">4. 查找所有员工入职时候的薪水情况，给出 emp_no 以及 salary， 并按照 emp_no 进行逆序</a><ul><li><a href="#inner-join">inner join</a></li><li><a href="#order-by-1">order by</a></li></ul></li><li><a href="#5-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%83%A8%E9%97%A8%E5%BD%93%E5%89%8D-manager-%E7%9A%84%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E6%83%85%E5%86%B5%E7%BB%99%E5%87%BA-dept_no-emp_no-%E4%BB%A5%E5%8F%8A-salary%E5%BD%93%E5%89%8D%E8%A1%A8%E7%A4%BA-to_date9999-01-01">5. 获取所有部门当前 manager 的当前薪水情况，给出 dept_no, emp_no 以及 salary，当前表示 to_date=&#39;9999-01-01&#39;</a><ul><li><a href="#inner-join-1">inner join</a></li></ul></li><li><a href="#6-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%9D%9E-manager-%E7%9A%84%E5%91%98%E5%B7%A5-emp_no">6. 获取所有非 manager 的员工 emp_no</a><ul><li><a href="#is-null"><code>is null</code></a></li><li><a href="#left-join-%E6%9B%BF%E6%8D%A2-in"><code>left join</code> 替换 <code>in</code></a></li></ul></li><li><a href="#7-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E5%BD%93%E5%89%8D%E7%9A%84-manager%E5%A6%82%E6%9E%9C%E5%BD%93%E5%89%8D%E7%9A%84-manager-%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%9D%E7%BB%93%E6%9E%9C%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E8%A1%A8%E7%A4%BA-to_date9999-01-01%E7%BB%93%E6%9E%9C%E7%AC%AC%E4%B8%80%E5%88%97%E7%BB%99%E5%87%BA%E5%BD%93%E5%89%8D%E5%91%98%E5%B7%A5%E7%9A%84-emp_no%E7%AC%AC%E4%BA%8C%E5%88%97%E7%BB%99%E5%87%BA%E5%85%B6-manager-%E5%AF%B9%E5%BA%94%E7%9A%84-manager_no">7. 获取所有员工当前的 manager，如果当前的 manager 是自己的话结果不显示，当前表示 to_date=&#39;9999-01-01&#39;。结果第一列给出当前员工的 emp_no,第二列给出其 manager 对应的 manager_no</a><ul><li><a href="#"><code>&lt;&gt;</code></a></li><li><a href="#inner-join-2">inner join</a></li></ul></li><li><a href="#8-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%83%A8%E9%97%A8%E4%B8%AD%E5%BD%93%E5%89%8D%E5%91%98%E5%B7%A5%E8%96%AA%E6%B0%B4%E6%9C%80%E9%AB%98%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E7%BB%99%E5%87%BA-dept_no-emp_no-%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84-salary">8. 获取所有部门中当前员工薪水最高的相关信息，给出 dept_no, emp_no 以及其对应的 salary</a><ul><li><a href="#inner-join-3">inner join</a></li><li><a href="#group-by">group by</a></li></ul></li><li><a href="#9-%E7%BB%9F%E8%AE%A1%E5%87%BA%E5%BD%93%E5%89%8D%E5%90%84%E4%B8%AAtitle%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E5%91%98%E5%B7%A5%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4%E5%AF%B9%E5%BA%94%E7%9A%84%E5%B9%B3%E5%9D%87%E5%B7%A5%E8%B5%84%E7%BB%93%E6%9E%9C%E7%BB%99%E5%87%BAtitle%E4%BB%A5%E5%8F%8A%E5%B9%B3%E5%9D%87%E5%B7%A5%E8%B5%84avg">9. 统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。</a><ul><li><a href="#%E5%87%BA%E7%8E%B0%E5%87%BA%E5%89%8D%E8%A6%81%E5%B0%86%E4%BA%8C%E5%BC%A0%E8%A1%A8%E4%B8%AD%E7%9A%84-to_date-%E5%AD%97%E6%AE%B5%E7%BA%A6%E6%9D%9F">出现<code>出前</code>，要将二张表中的 <code>to_date</code> 字段约束</a></li></ul></li><li><a href="#10-%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4to_date9999-01-01%E6%8E%92%E5%90%8D%E7%AC%AC%E4%BA%8C%E5%A4%9A%E7%9A%84%E5%91%98%E5%B7%A5%E7%BC%96%E5%8F%B7emp_no%E8%96%AA%E6%B0%B4salarylast_name%E4%BB%A5%E5%8F%8Afirst_name%E4%B8%8D%E5%87%86%E4%BD%BF%E7%94%A8order-by">10. 查找当前薪水(to_date=&#39;9999-01-01&#39;)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</a></li></ul></li></ul></li></ul>',1),E=a("h1",{id:"sql-基础",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#sql-基础","aria-hidden":"true"},"#"),n(" SQL 基础")],-1),u={href:"https://blog.csdn.net/jack__frost/article/details/72571540",target:"_blank",rel:"noopener noreferrer"},h=l('<h2 id="数据库基本操作" tabindex="-1"><a class="header-anchor" href="#数据库基本操作" aria-hidden="true">#</a> 数据库基本操作</h2><ul><li>创建数据库 <code>CREATE DATABASE &lt;数据库名&gt;；</code></li><li>删除数据库 <code>DROP DATABASE &lt;数据库名&gt;;</code></li><li>选择数据库 <code>USE &lt;数据库名&gt;；</code></li><li>创建索引，创建表的时候直接指定 <code>CREATE INDEX index_name ON table_name(column_list)</code></li><li>为表增加索引 <code>ALTER TABLE table_name ADD INDEX index_name(column_list)</code></li><li>创建数据表 <code>CREATE TABLE [if not exists] table_name(column_name, column_type)</code></li><li>删除数据表 <code>DROP TABLE table_name</code></li><li>插入数据 <code>INSERT INTO table_name ( field1, field2,...fieldN ) VALUES ( value1, value2,...valueN )</code></li><li>查询数据 <code>SELETE column_name1,column_name2 FROM table_name [WHERE Clause][LIMIT N][OFFSET M]</code></li><li>where 语句 <code>SELECT field1, field2,...fieldN FROM table_name [WHERE condition1 [AND [OR]] condition2.....</code></li><li>update 更新 <code>UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</code></li><li>delete 语句 <code>DELETE FROM table_name [WHERE Clause]</code></li><li>Like 子句 <code>SELECT field1, field2,...fieldN FROM table_name WHERE field1 LIKE condition1 [AND [OR]] filed2 = &#39;somevalue&#39;</code></li><li>union 操作符 UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据） UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据） <code>SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION [ALL | DISTINCT] SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];</code></li><li>order by 排序 <code>SELECT field1, field2,...fieldN table_name1, table_name2... ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC升序]]</code></li><li>group by 分组 <code>SELECT column_name, function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name;</code></li><li>inner join、left join、right join <code>SELETE 表1数据，表2数据 FROM 表1 INNER JOIN/LEFT JIOIN/RIGHT JOIN 表2 ON 表1参数=表2参数</code></li></ul>',2),k={href:"https://www.runoob.com/mysql/mysql-tutorial.html",target:"_blank",rel:"noopener noreferrer"},m=a("h1",{id:"jdbc-基础",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jdbc-基础","aria-hidden":"true"},"#"),n(" JDBC 基础")],-1),B=a("h2",{id:"数据库水平切分-垂直切分",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数据库水平切分-垂直切分","aria-hidden":"true"},"#"),n(" 数据库水平切分，垂直切分")],-1),A={href:"https://segmentfault.com/a/1190000006063258",target:"_blank",rel:"noopener noreferrer"},b=l(`<p><strong>水平切分</strong></p><p>称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。当一个表中的数据逐渐增多时，Sharding 时必然的选择，它可以将数据分布到集群的不同结点上，从而缓解单个数据库的压力。适合具有超大表的系统。</p><p>拆分原则：</p><p>通常情况下，我们使用取模的方式来进行表的拆分。比如一张有 400W 的用户表 <code>users</code>，为提高其查询效率我们把其分成 4 张表<code>users1</code>，<code>users2</code>，<code>users3</code>，<code>users4</code>。通过用 id 取模的方法把数据分散到四张表内 id % 4 + 1 = [1,2,3,4]，然后查询、更新和删除也是通过取模的方法来查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>$_GET<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span>
<span class="token number">17</span><span class="token operator">%</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
$tableName <span class="token operator">=</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">.</span><span class="token string">&#39;2&#39;</span>
<span class="token keyword">Select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users2 <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 insert 时还需要一张临时表 uid_temp 来提供自增的 id,该表的唯一用处就是提供自增的 id。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> uid_temp <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到自增的 id 后，又通过取模法进行分表插入；但是进行水平拆分后的表，字段的列和类型和原表应该是相同的，但是要记得去掉 auto_increment 自增长</p><p><strong>垂直拆分</strong></p><p>专库专用。一个数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者说压力分担到不同的库上面。通常按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用得分列切分到不同的表中。适合各业务之间耦合度非常低的系统。</p><p>通常我们按以下原则进行垂直拆分:</p><ol><li>把不常用的字段单独放在一张表;</li><li>把 text，blob 等大字段拆分出来放在附表中;</li><li>经常组合查询的列放在一张表中;</li></ol><h2 id="数据库两种引擎以及区别-介绍一下什么时候用-innodb-什么时候用-myisam。为什么查询操作-myisam-比-innodb-快" tabindex="-1"><a class="header-anchor" href="#数据库两种引擎以及区别-介绍一下什么时候用-innodb-什么时候用-myisam。为什么查询操作-myisam-比-innodb-快" aria-hidden="true">#</a> 数据库两种引擎以及区别？介绍一下什么时候用 Innodb 什么时候用 MyISAM。为什么查询操作 MyISAM 比 Innodb 快？</h2><p><strong>B+Tree 索引</strong></p>`,14),y={href:"https://blog.csdn.net/qq_17612199/article/details/50944413",target:"_blank",rel:"noopener noreferrer"},_=a("p",null,[a("strong",null,"MyISAM 索引实现：")],-1),v={href:"http://blog.jobbole.com/24006/",target:"_blank",rel:"noopener noreferrer"},g=l('<p>MyISAM 引擎使用 B+Tree 作为索引结构，叶节点的 data 域存放的是数据记录的地址。</p><p>MyISAM 的索引文件仅仅保存数据记录的地址。在 MyISAM 中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求 key 是唯一的，而辅助索引的 key 可以重复。</p><p>因此，MyISAM 中索引检索的算法为首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址，读取相应数据记录。</p><p><strong>InnoDB 索引实现：</strong></p><p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在二个不同的地方，所以一个表只能有一个聚簇索引。</p><p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先找到主键值，然后再到主索引中进行查找。</p><p><strong>如何选择:</strong></p><ol><li>是否要支持事务，如果要请选择 innodb，如果不需要可以考虑 MyISAM；</li><li>如果表中绝大多数都只是读查询，可以考虑 MyISAM，如果既有读写也挺频繁，请使用 InnoDB</li><li>系统奔溃后，MyISAM 恢复起来更困难，能否接受；</li><li>MySQL5.5 版本开始 Innodb 已经成为 Mysql 的默认引擎(之前是 MyISAM)，说明其优势是有目共睹的，如果你不知道用什么，那就用 InnoDB，至少不会差。</li></ol><p><strong>区别：</strong></p><ol><li>锁机制:MyISAM 是表级锁，而 InnoDB 是行级锁；</li><li>查询表的行数不同：MyISAM：select count( _ ) from table,MyISAM 只要简单的读出保存好的行数，注意的是，当 count( _ )语句包含 where 条件时，两种表的操作是一样的；InnoDB 中不保存表的具体行数，也就是说，执行 select count( * ) from table 时，InnoDB 要扫描一遍整个表来计算有多少行；</li><li>外键支持：mysiam 表不支持外键，而 InnoDB 支持；</li><li>事务处理：MyISAM 是非事务安全型的，而 InnoDB 是事务安全型的（支持事务处理等高级处理）；</li><li>（3）select ,update ,insert ,delete：如果执行大量的 SELECT，MyISAM 是更好的选择 如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。</li></ol><p><strong>为什么 MyISAM 会比 Innodb 的查询速度快：</strong></p><p>NNODB 在做 SELECT 的时候，要维护的东西比 MYISAM 引擎多很多；</p><ol><li>数据块，INNODB 要缓存，MYISAM 只缓存索引块， 这中间还有换进换出的减少；</li><li>innodb 寻址要映射到块，再到行，MYISAM 记录的直接是文件的 OFFSET，定位比 INNODB 要快</li><li>INNODB 还需要维护 MVCC 一致；虽然你的场景没有，但他还是需要去检查和维护 MVCC ( Multi-Version Concurrency Control )多版本并发控制</li></ol><h2 id="数据库索引介绍一下。主键和索引的区别" tabindex="-1"><a class="header-anchor" href="#数据库索引介绍一下。主键和索引的区别" aria-hidden="true">#</a> 数据库索引介绍一下。主键和索引的区别？</h2><ul><li>普通索引: 普通索引是 MySQL 中的基本索引类型，允许在定义索引的列中插入重复值和空值。</li><li>唯一索引: MySQL 数据库索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li><li>主键索引: 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引</li><li>全文索引: 全文索引类型为 FULLTEXT，在定义索引的列上支持值的全文查找，用于查找文本中的关键词。全文索引可以在 CHAR、VARCHAR 或者 TEXT 类型的列上创建。</li><li>聚集索引: 表数据按照索引的顺序来存储的，当在表中插入一行数据时，这行数据的存放的顺序（物理顺序）和建立索引的键值的逻辑顺序相同。  一个表只能包含一个聚集索引。</li><li>非聚簇索引: 表数据存储顺序与索引顺序无关，当在表中插入一行数据时，这行数据存放的顺序（物理顺序）在表的最后，不会影响数据表中原有的存储顺序。一个表中可以创建多个非聚集索引，一个表最多可以创建 249 个非聚集索引。</li><li>联合索引: 将一张表中多个列组成联合索引(col1,col2,col3)，其生效方式满足最左前缀原则。</li><li>哈希索引: 哈希索引就是采用一定的哈希算法，把键值换算成新的哈希值，检索时不需要类似 B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。 哈希索引可以以 O(1)时间进行查找，但是失去了有序性； InnoDB 存储引擎有一个特殊的功能叫&quot;自适应哈希索引&quot;，当某个索引值使用的非常频繁时，会在 B+Tree 索引上在创建一个哈希索引，这就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找</li><li>空间数据索引: 空间索引是对空间数据类型的字段建立的索引。</li><li>聚集索引和非聚簇索引区别与联系： 聚簇索引和非聚簇索引都是用 B+树实现的。但是聚簇索引中叶子节点存储的是一条完整的记录数据，非聚簇索引的叶子节点中存储的是指向主键的引用。</li><li>主键和索引的区别：</li></ul><ol><li>主键一定是唯一性索引，唯一性索引并不一定就是主键</li><li>一个表中可以有多个唯一性索引，但只能有一个主键</li><li>主键列不允许空值，而唯一性索引列允许空值</li><li>主键可以被其他字段作外键引用，而索引不能作为外键引用</li></ol>',16),f={href:"https://www.cnblogs.com/maybechen/p/8580542.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.csdn.net/jack__frost/article/details/72571540",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.csdn.net/jack__frost/article/details/72571540",target:"_blank",rel:"noopener noreferrer"},C=l('<h2 id="索引了解嘛-底层怎么实现的-什么时候会失效-索引使用的注意点" tabindex="-1"><a class="header-anchor" href="#索引了解嘛-底层怎么实现的-什么时候会失效-索引使用的注意点" aria-hidden="true">#</a> 索引了解嘛，底层怎么实现的，什么时候会失效，索引使用的注意点</h2><ul><li><p>B+树实现的。没有遵循最左匹配原则。 一些关键字会导致索引失效，例如  or，!=，not in，is null，is not null，like 查询是以%开头，隐式转换会导致索引失效。 对索引应用内部函数，索引字段进行了运算。</p></li><li><p>索引使用注意点：</p></li></ul><ol><li>一般说来，索引应建立在那些将用于 JOIN,WHERE 判断和 ORDER BY 排序的字段上。尽量不要对数据库中某个含有大量重复的值的字段建立索引</li><li>最好不要给数据库留 NULL，尽可能的使用 NOT NULL 填充数据库</li><li>应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描</li><li>in 和 not in 也要慎用，否则会导致全表扫描</li><li>like %keyword 索引失效，使用全表扫描</li><li>如果在 where 子句中使用参数，也会导致全表扫描</li><li>应尽量避免在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</li><li>在使用索引字段作为条件时，如果该索引是复合索引（多列索引），那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致</li></ol><ul><li>建立索引的原则：</li></ul><ol><li>定义有主键的数据列一定要建立索引。因为主键可以加速定位到表中的某一行</li><li>定义有外键的数据列一定要建立索引。外键列通常用于表与表之间的连接，在其上创建索引可以加快表间的连接</li><li>在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的</li><li>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间</li><li>在经常使用在 WHERE 子句中的列上面创建索引，加快条件的判断速度</li><li>在经常需要搜索的列上，可以加快搜索的速度</li></ol>',5),q={href:"https://www.jb51.net/article/142840.htm",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/jack__frost/article/details/72571540",target:"_blank",rel:"noopener noreferrer"},S=l('<h2 id="数据库的隔离级别" tabindex="-1"><a class="header-anchor" href="#数据库的隔离级别" aria-hidden="true">#</a> 数据库的隔离级别</h2><p>隔离级别：</p><ul><li>未提交读(Read Uncommitted) 事务中的修改，即使没有提交，对其它事务也是可见的。读取未提交的数据，也被称之为脏读。</li><li>提交读(Read Committed) 一个事务只能读取已经提交的事务所做的修改，即一个事务所做的修改在提交之前对其它事务是不可见的。已提交读隔离级别解决了脏读的问题，但是出现了不可重复读的问题。即事务 A 在两次查询的数据不一致，因为在两次查询之间事务 B 更新并提交了一条数据。</li><li>可重复读(repeatable read) 保证在同一个事务中多次读取同样数据的结果是一样的。</li><li>可串行化(Serializable) 强制事务串行执行。可串行化完全锁定字段，若一个事务来查询同一份数据就必须等待，直到前一个事务完成并解除锁定为止。是完整的隔离级别，会锁定对应的数据表格，因而会有效率的问题。</li></ul><h2 id="数据库的三范式" tabindex="-1"><a class="header-anchor" href="#数据库的三范式" aria-hidden="true">#</a> 数据库的三范式？</h2><p><strong>第一范式(确保每列保持原子性)</strong></p><p>数据库表中的所有字段都是单一属性，不可在分的，这个单一属性是由基本的数据类型所构成，如整数，浮点数，字符串等</p><p>数据库表的每一列都是不可分割的基本数据项，所有字段值都是不可分解的原子值</p><p><strong>第二范式(确保表中的每列都和主键相关)</strong></p><p>要求数据库表中的每个实例或行必须可以被<strong>惟一</strong>地区分。为实现区分通常需要我们设计一个主键来实现(这里的主键不包含业务逻辑)</p><p>要求实体的属性完全依赖于主关键字。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><p><strong>第三范式(确保每列都和主键列直接相关，而不是间接相关)</strong></p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p><h2 id="讲一下数据库-acid-的特性" tabindex="-1"><a class="header-anchor" href="#讲一下数据库-acid-的特性" aria-hidden="true">#</a> 讲一下数据库 ACID 的特性？</h2><ol><li><p>原子性：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚，回滚可以用回滚日志来实现</p></li><li><p>一致性：<s>数据库在事务执行前后都保持一致性状态，在一致性状态下，所有事务对一个数据的读取结果都是相同的。如果事务内有一个操作失败时，所有的更改过的数据都必须回滚到修改前的状态。</s></p><p>一致性是指事务必须使数据库从一个一致性状态变成另一个一致性状态，也就是事务执行前后必须处于一致性状态。</p><p>以转账为例，假设用户 A 和 B 两者的钱加起来是 5000，那么不管 A 和 B 之间如何转账，转多少次，事务结束后两个用户的钱加起来应该还得是 5000，这就是事务的一致性。</p></li><li><p>隔离性：一个事务所做的修改在最终提交以前，对其它事务是不可见的。</p></li><li><p>持久性：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能</p></li></ol><h2 id="mysql-主从复制" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制" aria-hidden="true">#</a> mysql 主从复制？</h2><ul><li><p>主从复制：指数据从一个数据库服务器的主节点上复制到其他一个或多个从节点的数据库服务器。MySql 数据库默认采用异步复制方式。从节点数据库不用一直访问主服务器也可以实现更新数据。 MySQL 的主从复制并不是数据库磁盘上的文件直接拷贝，而是通过逻辑的 binlog 日志复制到要同步的服务器本地，然后由本地的线程读取日志里面的 SQL 语句重新应用到 MySQL 数据库中。 主要设计三个线程：</p><ol><li>binlog 线程：负责将主服务器上的数据更改写入二进制（Binary log）中；</li><li>I/O 线程：负责从主服务器上读取二进制日志，并写入从服务器的重放（Replay log）中；</li><li>SQL 线程：负责读取重放日志并重放其中的 SQL 语句</li></ol></li><li><p>读写分离：主服务器处理写操作以及实时性要求比较高的读操作，而从服务器负责读操作，读写分离提高性能的原因在于：</p><ol><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性 读写分离常用代理方式来实现，代理服务器接受来自应用层传来的读写请求，然后决定转发到拿个服务器。</li></ol></li></ul>',16),L={href:"http://baijiahao.baidu.com/s?id=1598186201849829616&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},F=a("h2",{id:"leftjoin-和-rightjoin-的区别",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#leftjoin-和-rightjoin-的区别","aria-hidden":"true"},"#"),n(" leftjoin 和 rightjoin 的区别？")],-1),M=a("p",null,"left join(左联接)返回包括左表中的所有记录和右表中联结字段相等的记录；right join(右联接)返回包括右表中的所有记录和左表中联结字段相等的记录。 left 保留左表的值，右表无值填 null，right 相反",-1),I={href:"https://www.cnblogs.com/pcjim/articles/799302.html",target:"_blank",rel:"noopener noreferrer"},T=a("h2",{id:"数据库优化方法",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数据库优化方法","aria-hidden":"true"},"#"),n(" 数据库优化方法")],-1),R=a("ul",null,[a("li",null,"语句优化 要提高 MySQL 的更新/插入效率，应首先考虑降低锁的竞争，减少写操作的等待时间")],-1),j=a("li",null,[n("insert 语句 "),a("ol",null,[a("li",null,"批量插入数据的时候，同时插入多条"),a("li",null,"将进程/线程数控制在 2 倍于 CPU 数目相对合适"),a("li",null,"采用顺序主键策略（例如自增主键，或者修改业务逻辑，让插入的记录尽可能顺序主键）"),a("li",null,"考虑使用 replace 语句代替 insert 语句。")])],-1),Q=a("li",null,"如果不考虑数据的恢复，可使用 truncate table 语句删除数据，删除了不记录 mysql 日志文件",-1),N=a("li",null,"如果没有外键关联，innodb 执行 truncate 是先 drop table(原始表),再创建一个跟原始表一样空表,速度要远远快于 delete 逐条删除行记录。如果表有外键关联，truncate table 删除表数据为逐行删除",-1),O={href:"https://www.cnblogs.com/jimmy-muyuan/p/5874410.html",target:"_blank",rel:"noopener noreferrer"},P=a("li",null,[n("update 语句 "),a("ol",null,[a("li",null,"尽量不要修改主键字段"),a("li",null,"当修改 VARCHAR 型字段时，尽量使用相同长度内容的值代替"),a("li",null,"尽量最小化对于含有 UPDATE 触发器的表的 UPDATE 操作"),a("li",null,"避免 UPDATE 将要复制到其他数据库的列"),a("li",null,"避免 UPDATE 建有很多索引的列。"),a("li",null,"避免 UPDATE 在 WHERE 子句条件中的列")])],-1),H=a("li",null,"replace 语句: 根据应用情况可以使用 replace 语句代替 insert/update 语句： 使用 REPLACE 插入记录时，如果记录不重复（或往表里插新记录），REPLACE 功能与 INSERT 一样，如果存在重复记录，REPLACE 就使用新记录的值来替换原来的记录值，而 UPDATE 什么都不做。使用 REPLACE 的最大好处就是可以将 DELETE 和 INSERT 合二为一，形成一个原子操作。这样就可以不必考虑同时使用 DELETE 和 INSERT 时添加事务等复杂操作了。",-1),X=a("ul",null,[a("li",null,"查找优化")],-1),U=a("li",null,"是否向数据库请求了不需要的数据。也就是说不要轻易使用 select * from ，能明确多少数据就查多少个",-1),W={href:"https://www.cnblogs.com/sunss/p/6548588.html",target:"_blank",rel:"noopener noreferrer"},V=a("ol",null,[a("li",null,"使用索引覆盖扫描"),a("li",null,"改变库表结构。例如使用单独的汇总表。"),a("li",null,"重写这个复杂的查询。让 mysql 优化器能够以更优化的方式执行这个查询。")],-1),K=l("<li>设计查询的时候考虑是否需要将一个复杂的查询分成多个简单的查询。分解关联查询让缓存的效率更高。</li><li>单表查询步步优化： <ol><li>明确需要的字段，要多少就写多少字段</li><li>使用分页语句：limit start , count 或者条件 where 子句</li><li>如果是有序的查询，可使用 ORDER BY</li><li>开启查询缓存</li><li>使用索引</li></ol></li><li>多表查询步步优化： <ol><li>对查询进行优化，要尽量避免全表扫描</li><li>应尽量避免在 where 子句中对字段进行 null 值判断</li><li>in 和 not in 也要慎用，否则会导致全表扫描</li><li>任何地方都不要使用 select _ from t ，用具体的字段列表代替 _</li><li>在 Join 表的时候使用相同类型的例，并将其索引</li><li>尽量使用数字型字段，只含数值信息的字段尽量不要设计为字符型</li></ol></li>",3),J=l("<ul><li>索引优化 <ol><li>最左前缀匹配原则</li><li>=和 in 可以乱序</li><li>尽量选择区分度高的列作为索引,区分度的公式是 count(distinct col)/count( * )</li><li>索引列不能参与计算，保持列“干净”</li><li>尽量的扩展索引，不要新建索引</li><li>定义有外键的数据列一定要建立索引</li><li>对于那些查询中很少涉及的列，重复值比较多的列不要建立索引</li><li>对于定义为 text、image 和 bit 的数据类型的列不要建立索引</li><li>对于经常存取的列避免建立索引</li></ol></li><li>表的优化</li></ul><ol><li>单表设计与优化 <ol><li>设计规范化表，消除数据冗余</li><li>适当的冗余，增加计算列，在数据冗余和处理速度之间找到合适的平衡点</li><li>索引的设计</li><li>主键和外键的必要性</li><li>存储过程、视图、函数的适当使用，有助于减少应用程序中 SQL 复制的弊端</li><li>分割你的表，减小表尺寸</li><li>字段设计原则：数据类型尽量用数字型不用字符型、数据类型尽量小、尽量不要允许 NULL，除非必要，可以用 NOT NULL+DEFAULT 代替、少用 TEXT 和 IMAGE，二进制字段的读写是比较慢的、自增字段要慎用，不利于数据迁移</li></ol></li><li>基于单表设计的多表设计原则 <ol><li>建立合适的表关系：一对一、一对多、多对一、多对多</li><li>适当的表拆分：水平拆分、垂直拆分</li></ol></li></ol>",2),z={href:"https://blog.csdn.net/jack__frost/article/details/72571540",target:"_blank",rel:"noopener noreferrer"},Y=l(`<h2 id="慢日志-explain-查询分析-sql-语句进行优化" tabindex="-1"><a class="header-anchor" href="#慢日志-explain-查询分析-sql-语句进行优化" aria-hidden="true">#</a> 慢日志+explain 查询分析 SQL 语句进行优化</h2><p>通过开启慢日志功能来优化查询语句：</p><p>步骤：</p><ol><li><p>查看慢查询日志是否开启：<code>show variables like &#39;%slow_query_log%&#39;</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables  <span class="token operator">like</span> <span class="token string">&#39;%slow_query_log%&#39;</span><span class="token punctuation">;</span>

 <span class="token operator">+</span><span class="token comment">---------------------+----------------------------------------+</span>
 <span class="token operator">|</span> Variable_name       <span class="token operator">|</span> <span class="token keyword">Value</span>                                  <span class="token operator">|</span>
 <span class="token operator">+</span><span class="token comment">---------------------+----------------------------------------+</span>
 <span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> <span class="token keyword">ON</span>                                     <span class="token operator">|</span>
 <span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span>var<span class="token operator">/</span>huosuSDK<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span>
 <span class="token operator">+</span><span class="token comment">---------------------+----------------------------------------+</span>
 <span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>开启慢日志：<code>set global slow_query_log = 1</code></p></li><li><p>查看慢查询日志阙值：<code>show global variables like &#39;%long_query_time%&#39;</code></p></li><li><p>设置慢查询日志阙值：<code>set global long_query_time = 3</code>，超出次设定值的 SQL 即被记录到慢查询日志，缺省值为 10s</p></li><li><p>查看多少 SQL 语句超过了阙值：<code>show global status like &#39;%Slow_queries%&#39;</code></p></li></ol><p>MySQL 提供的日志分析工具 mysqldumpslow，该工具是慢查询自带的分析慢查询工具，可以得到返回次数最多、访问次数最多的 SQL 语句等功能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>c : 访问计数
l : 锁定时间
r : 返回记录
t : 查询时间
al:平均锁定时间
ar:平均返回记录数
at:平均查询时间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-t</code>， 是 <code>top n</code> 的意思，即为返回前面多少条的数据；<code>-s</code> 是表示按照何种方式排序，常见用法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
mysqldumpslow <span class="token operator">-</span>s c <span class="token operator">-</span>t <span class="token number">10</span> <span class="token operator">/</span><span class="token keyword">database</span><span class="token operator">/</span>mysql<span class="token operator">/</span>mysql06_slow<span class="token punctuation">.</span>log <span class="token comment"># 得到访问次数最多的 10 个 SQL</span>

mysqldumpslow <span class="token operator">-</span>s r <span class="token operator">-</span>t <span class="token number">10</span> <span class="token operator">/</span><span class="token keyword">database</span><span class="token operator">/</span>mysql<span class="token operator">/</span>mysql06_slow<span class="token punctuation">.</span>log <span class="token comment"># 得到返回记录集最多的 10 个 SQL</span>

mysqldumpslow <span class="token operator">-</span>s t <span class="token operator">-</span>t <span class="token number">3</span> <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token comment"># 取出查询时间最慢的3条慢查询</span>

mysqldumpslow <span class="token operator">-</span>s t <span class="token operator">-</span>t <span class="token number">10</span> <span class="token operator">-</span>g “<span class="token keyword">left</span> <span class="token keyword">join</span>” <span class="token operator">/</span><span class="token keyword">database</span><span class="token operator">/</span>mysql<span class="token operator">/</span>mysql06_slow<span class="token punctuation">.</span>log <span class="token comment"># 得到按照时间排序的前 10 条里面含有左连接的查询语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),G={href:"https://www.cnblogs.com/sunss/p/6548588.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://blog.csdn.net/qq_35216516/article/details/80523773",target:"_blank",rel:"noopener noreferrer"},Z=l("<p>使用 EXPLAIN 关键字可以分析 SELECT 查询语句，通过分析 EXPLAIN 结果来优化查询语句。比较重要的字段：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>id</td><td>select_type</td><td>table</td><td>type</td><td>possible_keys</td><td>key</td><td>key_len</td><td>ref</td><td>rows</td><td>Extra</td></tr></tbody></table><ol><li>select_type：查询中每个 select 子句的类型，有简单查询、联合查询、子查询</li><li>key：实际使用的索引</li><li>rows：扫描的行数</li><li>type：显示查询使用了何种类型。从最好到最差的连接类型为 NULL、system、const、eq_ref、ref、range、index 和 ALL，得保证查询至少达到 range 级别，最好能达到 ref。 <ol><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配；</li><li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行；</li><li>range：只检索给定范围的行，使用一个索引来选择行；</li></ol></li></ol><p>当我们优化了一条 SQL 语句时后，可以通过 <code>show profiles</code> 看到其执行时间和效率。默认的是关闭的，可以通过 <code>SET profiling = 1;</code> 开启，之后运行一个查询语句之后使用 <code>show profiles</code> 进行查看。</p><p>为了防止 MySQL 缓存对查询结果的影响，我们可以临时关闭缓存，使用命令：</p><blockquote><p><code>set global query_cache_size=0</code>;<br><code>set global query_cache_type=0</code>;</p></blockquote><p><code>query_cache_size</code> 表示缓存的大小，<code>query_cache_type</code> 表示缓存那种类型的 select 结果集。之后可以查看缓存是否关闭：</p><blockquote><p><code>show variables like &#39;%query_cache%&#39;;</code></p></blockquote>",8),aa={href:"https://www.cnblogs.com/mydriverc/p/7086523.html",target:"_blank",rel:"noopener noreferrer"},na={href:"https://www.csdn.net/gather_28/MtTaEg2sNzAyNS1ibG9n.html",target:"_blank",rel:"noopener noreferrer"},ea=l('<h2 id="mysql-字段类型" tabindex="-1"><a class="header-anchor" href="#mysql-字段类型" aria-hidden="true">#</a> MySQL 字段类型</h2><p><strong>整型</strong></p><p>在 MySQL 中支持的 5 个主要整数类型是 tinyint，smallint，mediumint，int 和 bigint。这些类型在很大程度上是相同的，只有它们存储的值的大小是不相同的</p><p>数值数据类型要比字符串执行更快，尤其是在比较运算时，所以我们应该选择最简单的数据类型。区间小的数据类型占用空间更少，处理速度更快，如 tinyint 比 bigint 要快的多</p><p>整数类型很多比如 tinyint、int、smallint、bigint 等，那么我们要根据自己需要存储的数据长度决定使用的类型</p><blockquote><p>为什么 MySQL 存储的值要分有符号和无符号呢？因为一个字节占 8bit，也就 1 个 bit 有 0 和 1 两种可能，8 个 bit 就是 2^8 = 256 种可能，也就是 0~255; 但如果是有符号的话，就得拿一个 1bit 来存储这个负号，本来 8bit 只剩 7bit，2^7 = 128，也就是 -128~127(正数部分包含一个 0);</p></blockquote><p><strong>浮点型</strong></p><p>MySQL 支持的三个浮点类型是 float、double 和 decimal 类型。float 数值类型用于表示单精度浮点数值，而 double 数值类型用于表示双精度浮点数值。一般不会使用 double 类型</p><p>浮点数 float 在储存空间及运行效率上要优于精度数值类型 decimal，但 float 与 double 会有舍入错误而 decimal 则可以提供更加准确的小数级精确运算不会有错误产生计算更精确，适用于金融类型数据的存储。</p><p>如何选择：</p><ol><li>如果你要表示的浮点型数据转成二进制之后能被 32 位 float 存储，或者可以容忍截断，则使用 float，这个范围大概为要精确保存 6 位数字左右的浮点型数据；比如 10 分制的店铺积分可以用 float 存储，小商品零售价格(1000 块之内)</li><li>如果你要表示的浮点型数据转成二进制之后能被 64 位 double 存储，或者可以容忍截断，这个范围大致要精确到保存 13 位数字左右的浮点型数据。比如汽车价格，几千万的工程造价</li><li>相比 double，已经满足我们大部分浮点型数据的存储精度要求，如果还要精益求精，则使用 decimal 定点型存储</li></ol>',11),sa={href:"http://yongxiong.leanote.com/post/mysql_float_double_decimal",target:"_blank",rel:"noopener noreferrer"},la=l("<p><strong>字符串类型</strong></p><p>MySQL 提供了 8 个基本的字符串类型，可以存储的范围从简单的一个字符到巨大的文本块或二进制字符串数据。一个英文占用 1 个字节，一个中文占用 2 个字节。</p><ul><li><p>char 与 varchar</p><p>char 固定长度的字符串保存类型，会去掉尾部的空格。在数据长度相近时使用 char 类型比较合适，比如 md5 加密的密码用户名等。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补。char 范围大小为 0-255，varchar 并且都必须带有一个范围在 0-255 之间的指示器。</p><p>varchar 是可变长度字符串类型，但他要在总长度上加 1 个字符，这个用来存储位置。由于 varchar 是根据储存的值来保存数据，所以可以大大节约磁盘空间，提高运行效率。</p><p>如果数据经常进行更新修改操作，那么 char 更好些，因为 char 长度固定，性能上要快。如果数据经常被执行更新操作，由于 varchar 是根据内容来进行储存的，所以 MySQL 将做更多的工作来完成更新操作，如果新数据长度大于老数据长度一些存储引擎会进行拆分操作处理，因此性能不高。</p><p>MyISAM 数据表，最好使用 char 固定长度的数据列代替可变长度的数据列。InnoDB 存储引擎：建议使用 varchar 类型。对于 InnoDB 数据表，内部的行存储格式没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），因此在本质上，使用固定长度的 char 列不一定比使用可变长度 VARCHAR 列性能要好。因而，主要的性能因素是数据行使用的存储总量。由于 char 平均占用的空间多于 varchar，因此使用 varchar 来最小化需要处理的数据行的存储总量和磁盘 I/O 是比较好的。</p></li><li><p>text 与 blob 对于字段长度要求超过 255 个的情况下，MySQL 提供了 text 和 blob 两种类型。这些大型的数据用于存储文本块或图像、声音文件等二进制数据类型。</p><p>目前，varchar 也可以存储和 text 相同大小的数据，也就是 65535(64k) 个字节，二者区别：</p><ol><li>text 字段，MySQL 不允许有默认值。建立索引必须给出前缀索引长度</li><li>varchar 允许有默认值，对索引长度没限制</li><li>根据存储的实现:可以考虑用 varchar 替代 text，因为 varchar 存储更弹性，存储数据少的话性能更高</li><li>如果需要非空的默认值，就必须使用 varchar</li><li>如果存储的数据大于 64K，就必须使用到 mediumtext， longtext，因为 varchar 已经存不下了</li><li>如果 varchar(255+) 之后，和 text 在存储机制是一样的，性能也相差无几</li><li>注意 varchar(255) 不只是 255byte，实质上有可能占用的更多</li></ol></li></ul>",3),oa={href:"https://blog.51cto.com/arthur376/2121160",target:"_blank",rel:"noopener noreferrer"},ta=l("<p><strong>时间类型</strong></p><ul><li><p>date、time 和 year</p><p>MySQL 用 date 和 year 类型存储简单的日期值，使用 time 类型存储时间值。</p></li><li><p>datetime 和 timestamp</p><ul><li>二者可以把日期和时间作为单个的值进行存储。</li><li>timestamp 只占 4 个字节，datetime 以 8 个字节储存</li><li>如果存进去的是 NULL，timestamp 会自动储存当前时间，而 datetime 会储存 NULL</li><li>如果在时间上要超过 Linux 时间的，或者服务器时区不一样的就建议选择 datetime。</li><li>如果是想要使用自动插入时间或者自动更新时间功能的，可以使用 timestamp。</li></ul></li></ul>",2),ia={href:"https://segmentfault.com/a/1190000017393602",target:"_blank",rel:"noopener noreferrer"},ra=l(`<p><strong>字段总结</strong></p><ol><li>最常用也就是 varchar(255)，char(255)，text，tinyint(4)，smallint(6)，mediumint，int(11)几种。</li><li>复合类型我们一般用 tinyint，更快的时间更省的空间以及更容易扩展</li><li>选择合理范围内最小的，选择相对简单的数据类型</li><li>不要使用 null。因为 MySQL 对 null 字段索引优化不佳，增加更多的计算难度，同时在保存与处理 null 类形时，也会做更多的工作，所以从效率上来说，不建议用过多的 null。有些值他确实有可能没有值，怎么办呢？解决方法是数值用整数 0，字符串用空来定义默认值即可。</li><li>保存数值类型最好不要用字符串数据类型。这样存储的空间显然是会更大，而且在排序时字符串的 9 是大于 22 的，其实如果进行运算时 MySQL 会将字符串转换为数值类型，大大降低效果，而且这种转换是不会走原有的索引的</li><li>字符串数据类型是一个万能数据类型，可以储存数值、字符串、日期等。</li><li>关于手机号，推荐用 char(11)，char(11)在查询上更有效率，因为手机号是一个活跃字段参与逻辑会很多。</li></ol><p><strong>常用字段举例</strong></p><ul><li>姓名：char(20)</li><li>价格：DECIMAL(7, 3)</li><li>产品序列号：SMALLINT(5) unsigned</li><li>文章内容: TEXT</li><li>MD5: CHAR(32)</li><li>ip: char(15)</li><li>time: int(10)</li><li>email char(32)</li></ul><h2 id="mysql-对于大字段的存储" tabindex="-1"><a class="header-anchor" href="#mysql-对于大字段的存储" aria-hidden="true">#</a> MySQL 对于大字段的存储</h2><p><strong>Compact 行格式：</strong></p><p>Compact 格式没有将大数据全部放在数据页中，而是将一部分数据放在了外部存储页中，数据页存储 768 个字节</p><p><strong>Dynamic 行格式：</strong></p><p>MySQL5.1 后引入新的文件格式：Dynamic 和 Compressed，数据页只存储 20 字节，其余的都放在溢出段中</p><p>每个 innoDB 表中最好有一个自增列作为主键，使得新记录写入尽可能是顺序的。innoDB 数据如果是顺序写入的话，最理想的情况下，data page 的填充率是 15/16，一般是在 1/2 到 15/16 之间</p><h2 id="text-blob-varchar-很长-如何存储以及优化" tabindex="-1"><a class="header-anchor" href="#text-blob-varchar-很长-如何存储以及优化" aria-hidden="true">#</a> text blob varchar 很长，如何存储以及优化</h2><ol><li>如果有多个大字段，尽量序列化，压缩之后存储在同一列中，避免多次 off-page</li><li>将大字段从主表中拆分出来 <ol><li>存储到键值中</li><li>存储在单独的一张字表中，压缩并且必须保证一行记录小于 8K</li></ol></li></ol><h2 id="数据库架构" tabindex="-1"><a class="header-anchor" href="#数据库架构" aria-hidden="true">#</a> 数据库架构</h2><h2 id="谈一下你对继承映射的理解。" tabindex="-1"><a class="header-anchor" href="#谈一下你对继承映射的理解。" aria-hidden="true">#</a> 谈一下你对继承映射的理解。</h2><p>在面向对象的程序领域中，类与类之间是有继承关系的，但是在关系数据库的世界中，表与表之间没有任何关键字可以明确指明这两张表的父子关系，表与表是没有继承关系这样的说法的。为了将程序领域中的继承关系反映到数据中，Hibernate 为我们提供了 3 中方案： 继承关系的映射策略有三种：</p><ol><li>每个继承结构一张表，不管多少个子类都用一张表。</li><li>每个子类一张表，公共信息放一张表，特有信息放单独的表。</li><li>每个具体类一张表，有多少个子类就有多少张表。</li></ol><p>第一种方式属于单表策略，其优点在于查询子类对象的时候无需表连接，查询速度快，适合多态查询；缺点是可能导致表很大。后两种方式属于多表策略，其优点在于数据存储紧凑，其缺点是需要进行连接查询，不适合多态查询。</p><h2 id="说出数据连接池的工作机制是什么" tabindex="-1"><a class="header-anchor" href="#说出数据连接池的工作机制是什么" aria-hidden="true">#</a> 说出数据连接池的工作机制是什么?</h2><ol><li>在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数；</li><li>当应用程序向连接池请求的连接数超过最大连接数量时,这些请求将被加入到等待队列中。</li></ol><h2 id="jdbc-中如何进行事务处理" tabindex="-1"><a class="header-anchor" href="#jdbc-中如何进行事务处理" aria-hidden="true">#</a> JDBC 中如何进行事务处理？</h2><p>Connection 的三个方法与事务有关：</p><ol><li>setAutoCommit（boolean）：设置是否为自动提交事务，如果 true（默认值为 true）表示自动提交，也就是每条执行的 SQL 语句都是一个单独的事务，如果设置为 false，那么相当于开启了事务了；con.setAutoCommit(false) 表示开启事务。</li><li>commit（）：提交结束事务。</li><li>rollback（）：回滚结束事务。</li></ol><h2 id="sql-注入" tabindex="-1"><a class="header-anchor" href="#sql-注入" aria-hidden="true">#</a> SQL 注入？</h2><ul><li><p>概念： 所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单或输入域名或页面请求的查询字符串中，最终达到欺骗服务器执行恶意的 SQL 命令。具体来说，它是利用现有应用程序，将（恶意的）SQL 命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL 语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行 SQL 语句。通过 SQL 语句，实现无帐号登录，甚至篡改数据库。</p></li><li><p>分类： SQL 注入可以分为平台层注入和代码层注入。前者由不安全的数据库配置或数据库平台的漏洞所致；后者主要是由于程序员对输入未进行细致地过滤，从而执行了非法的数据查询</p></li><li><p>举例： 比如在一个登录界面，如下输入可实现免帐号和密码登录：</p><pre><code>| 用户名      | 密码 |
| ----------- | ---- |
| ‘or 1 = 1-- |
</code></pre><p>点登陆,如若没有做特殊处理,那么这个非法用户就很得意的登陆进去了，why?</p><p>从理论上说，后台认证程序中会有如下的 SQL 语句： &quot;SELECT _ FROM user WHERE username=&#39; &quot;+username+&quot; &#39; AND password=&#39; &quot;+password+&quot; &#39; &quot;; 当输入了上面的用户名和密码，上面的 SQL 语句变成： SELECT _ FROM user WHERE username=&#39; &#39; or 1=1 -- AND password=&#39; &#39;;</p><p>分析：Where 语句后面的 username=&#39; &#39; or 1=1 这个条件一定会成功；然后后面的--是注释符，它将后面的语句注释，所以语句永远都能正确执行，用户轻易骗过系统，获取合法身份。 如果是执行：SELECT * FROM user_table WHERE  username=&#39; &#39; ;DROP DATABASE (DB Name) --&#39; and password=&#39; &#39;将导致数据库被删除。</p></li><li><p>解决方法：</p></li></ul><ol><li>（简单又有效的方法）PreparedStatement 采用预编译语句集，它内置了处理 SQL 注入的能力，只要使用它的 setXXX 方法传值即可。 原理：sql 注入只对 sql 语句的准备(编译)过程有破坏作用，而 PreparedStatement 已经准备好了，执行阶段只是把输入串作为数据处理，而不再对 sql 语句进行解析,准备,因此也就避免了 sql 注入问题.</li><li>使用正则表达式过滤传入的参数</li><li>字符串过滤</li><li>jsp 中调用该函数检查是否包函非法字符，防止 SQL 从 URL 注入</li><li>JSP 页面判断代码，使用 javascript 在客户端进行不安全字符屏蔽</li></ol><h2 id="索引为什么能查的快-为什么而需要索引-索引的优缺点" tabindex="-1"><a class="header-anchor" href="#索引为什么能查的快-为什么而需要索引-索引的优缺点" aria-hidden="true">#</a> 索引为什么能查的快？为什么而需要索引？索引的优缺点？</h2><p><strong>使用索引原因：</strong></p><p>数据在磁盘上是以块的形式存储的。为确保对磁盘操作的原子性，访问数据的时候会一并访问所有数据块。磁盘上的这些数据块与链表类似，即它们都包含一个数据段和一个指针，指针指向下一个节点（数据块）的内存地址，而且它们都不需要连续存储。</p><p>当表中有大量记录时，若要对表进行查询，第一种搜索信息方式是全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录，这样做会消耗大量数据库系统时间，并造成大量磁盘 I/O 操作；第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的 ROWID（相当于页码）快速找到表中对应的记录。</p><p><strong>优点：</strong></p><ol><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li><li>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</li><li>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</li><li>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</li><li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li></ol><p><strong>缺点：</strong></p><ol><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li><li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li></ol><h2 id="索引的底层使用什么实现的-为什么不用-b-树或者红黑树" tabindex="-1"><a class="header-anchor" href="#索引的底层使用什么实现的-为什么不用-b-树或者红黑树" aria-hidden="true">#</a> 索引的底层使用什么实现的，为什么不用 B 树或者红黑树？</h2><p><strong>底层实现：</strong> B+树只有叶节点存放数据，其余节点用来索引，而 B-树是每个索引节点都会有 Data 域。Mysql 通过磁盘 IO 次数来衡量查询效率</p><p>B-树/B+树的特点就是每层节点数目非常多，层数很少，目的就是为了就少磁盘 IO 次数，但是 B-树的每个节点都有 data 域（指针），这无疑增大了节点大小，说白了增加了磁盘 IO 次数（磁盘 IO 一次读出的数据量大小是固定的，单个数据变大，每次读出的就少，IO 次数增多，一次 IO 多耗时），而 B+树除了叶子节点其它节点并不存储数据，节点小，磁盘 IO 次数就少。这是优点之一。</p><p>另一个优点是： B+树所有的 Data 域在叶子节点，一般来说都会进行一个优化，就是将所有的叶子节点用指针串起来。这样遍历叶子节点就能获得全部数据，这样就能进行区间访问啦。在数据库中基于范围的查询是非常频繁的，而 B 树不支持这样的遍历操作。</p><p>AVL 树和红黑树基本都是存储在内存中才会使用的数据结构。在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘 IO 读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘 IO 代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘 IO 频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B 树可以有多个子女，从几十到上千，可以降低树的高度</p><h2 id="redo-undo-checkpoint" tabindex="-1"><a class="header-anchor" href="#redo-undo-checkpoint" aria-hidden="true">#</a> redo？undo？checkpoint？</h2>`,39),pa={href:"https://zhuanlan.zhihu.com/p/34650908",target:"_blank",rel:"noopener noreferrer"},da=l('<p>数据库数据存放的文件称为 data file；日志文件称为 log file；数据库数据是有缓存的，如果没有缓存，每次都写或者读物理 disk，那性能就太低下了。数据库数据的缓存称为 data buffer，日志（redo）缓存称为 log buffer；既然数据库数据有缓存，就很难保证缓存数据（脏数据）与磁盘数据的一致性。</p><ul><li>undo undo 日志用于记录事务开始前的状态，用于事务失败时的回滚操作；</li><li>redo redo 日志记录事务执行后的状态，用来恢复未写入 data file 的已成功事务更新的数据。</li><li>举例 例如某一事务的事务序号为 T1，其对数据 X 进行修改，设 X 的原值是 5，修改后的值为 15，那么 Undo 日志为&lt;T1, X, 5&gt;，Redo 日志为&lt;T1, X, 15&gt;</li></ul><p>梳理下事务执行的各个阶段：</p><ol><li>写 undo 日志到 log buffer；</li><li>执行事务，并写 redo 日志到 log buffer；</li><li>如果 innodb_flush_log_at_trx_commit=1，则将 redo 日志写到 log file，并刷新落盘。</li><li>提交事务。</li></ol><ul><li><p>为什么没有写 data file，事务就提交了？ 因为 data buffer 中的数据会在合适的时间由存储引擎写入到 data file，如果在写入之前，数据库宕机了，根据落盘的 redo 日志，完全可以将事务更改的数据恢复。先持久化日志的策略叫做 Write Ahead Log，即预写日志。</p></li><li><p>checkpoint checkpoint 是为了定期将 db buffer 的内容刷新到 data file。当遇到内存不足、db buffer 已满等情况时，需要将 db buffer 中的内容/部分内容（特别是脏数据）转储到 data file 中。在转储时，会记录 checkpoint 发生的”时刻“。在故障回复时候，只需要 redo/undo 最近的一次 checkpoint 之后的操作。</p></li></ul><h2 id="mysql-写数据的时候-需要先将数据写到-buffer-里-再写到磁盘里-万一-mysql-这时候突然挂了-怎么办" tabindex="-1"><a class="header-anchor" href="#mysql-写数据的时候-需要先将数据写到-buffer-里-再写到磁盘里-万一-mysql-这时候突然挂了-怎么办" aria-hidden="true">#</a> mysql 写数据的时候,需要先将数据写到 buffer 里,再写到磁盘里,万一 MySQL 这时候突然挂了,怎么办?</h2><p>根据 checkpoint 点执行数据库 redo、undo 操作</p><h2 id="where-和-having-by-区别" tabindex="-1"><a class="header-anchor" href="#where-和-having-by-区别" aria-hidden="true">#</a> where 和 having by 区别</h2><ul><li>Where 是一个约束声明，是在结果返回之前起作用的，且 Where 中不能使用聚合函数</li><li>Having 是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在 Having 中可以使用聚合函数</li></ul><h2 id="树总结" tabindex="-1"><a class="header-anchor" href="#树总结" aria-hidden="true">#</a> 树总结</h2><p><strong>共同点：</strong></p><ol><li>都是动态结构。在删除，插入操作的时候，都不需要彻底重建原始的索引树。最多就是执行一定量的旋转，变色操作来有限的改变树的形态。而这些操作所付出的代价都远远小于重建一棵树</li><li>查找的时间复杂度大体维持在 O(log(N))数量级上。可能有些结构在最差的情况下效率将会下降很快，比如 BST</li></ol><p><strong>二叉查找树(BST)：</strong></p><ol><li>性质： <ol><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>左、右子树也分别为二叉排序树；</li><li>没有键值相等的节点</li></ol></li><li>效率总结： <ol><li>查找最好时间复杂度 O(logN)，最坏时间复杂度 O(N)；</li><li>插入删除操作算法简单，时间复杂度与查找差不多。</li></ol></li><li>缺点：最差情况下竟然和顺序查找效率相当</li></ol><p><strong>平衡二叉查找树(AVL)：</strong></p><ol><li><p>概念：</p><p>它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</p></li><li><p>效率总结：</p><ol><li>查找的时间复杂度维持在 O(logN)，不会出现最差情况</li><li>AVL 树在执行每个插入操作时最多需要 1 次旋转，其时间复杂度在 O(logN)左右。</li><li>AVL 树在执行删除时代价稍大，执行每个删除操作的时间复杂度需要 O(2logN)。</li></ol></li><li><p>缺点：</p><ol><li>二叉平衡树的严格平衡策略以牺牲建立查找结构(插入，删除操作)的代价，换来了稳定的 O(logN)的查找时间复杂度;</li><li>数据库中的数据基本都是放在磁盘中的，每读取一个二叉树的结点就是一次磁盘 IO，性能就成了一个很大的问题了</li></ol></li></ol><p><strong>红黑树(RBT)：</strong></p><ol><li>效率总结： <ol><li>查找效率最好情况下时间复杂度为 O(logN)，但在最坏情况下比 AVL 要差一些，但也远远好于 BST，这是由于红黑树的性质最长路径长度不超过最短路径长度的 2 倍决定的。</li><li>插入和删除操作改变树的平衡性的概率要远远小于 AVL（RBT 不是高度平衡的）。因此需要的旋转操作的可能性要小，而且一旦需要旋转，插入一个结点最多只需要旋转 2 次，删除最多只需要旋转 3 次(小于 AVL 的删除操作所需要的旋转次数)。虽然变色操作的时间复杂度在 O(logN)，但是实际上，这种操作由于简单所需要的代价很小。</li></ol></li><li>缺点：大量数据存储中，实现查询这样一个实际背景下，由于树深度过大而造成磁盘 IO 读写过于频繁，进而导致效率低下</li></ol><p><strong>B-树（B 树）：</strong></p><ol><li><p>性质(m 叉树)：</p><ol><li>树中每个结点至多有 m 个孩子；</li><li>除根结点和叶子结点外，其它每个结点至少有[m/2]个孩子；</li><li>若根结点不是叶子结点，则至少有 2 个孩子；</li><li>所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息；</li><li>每个非终端结点中包含有 n 个关键字信息： (n，A0，K1，A1，K2，A2，......，Kn，An)。其中， a) Ki (i=1...n)为关键字，且关键字按顺序排序 Ki &lt; K(i-1)；  b) Ai 为指向子树根的接点，且指针 A(i-1)指向子树种所有结点的关键字均小于 Ki，但都大于 K(i-1)； c) 关键字的个数 n 必须满足：[m/2]-1 &lt;= n &lt;= m-1</li></ol></li><li><p>B 树的查找：</p><p>与二叉搜索树相似，但不是两路分支。他的查找分为两个基本的操作。</p><ol><li>在 B 树中找结点；</li><li>在结点内找关键字。由于 B 树常存储在磁盘中，则前一个查找是在磁盘中进行的，而后一个查找是在内存中进行的，即找到目标结点后，将其读入内存，然后采用顺序或折半查找法查找等于 k 的关键字。这是一个内存与外存的交叉过程。</li></ol></li><li><p>效率总结： 由于考虑磁盘储存结构，B 树的查找、删除、插入的代价都远远要小于任何二叉结构树(读写磁盘次数的降低)</p></li><li><p>缺点：在 B 数中我们不经要遍历节点，还要对每个节点中的关键字进行遍历，这样非常的糟糕，所以引入了 B+树</p></li></ol><p><strong>B+树：</strong></p><ol><li>性质： 其定义基本与 B-树同，除了： <ol><li>有 n 棵子树的结点中含有 n 个关键字；(B 树是 n 棵子树有 n+1 个关键字)</li><li>所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接</li></ol></li><li>与 B 树比较： <ol><li>B+树比 B 树更适合实际应用中操作系统的文件索引和数据库索引原因：B+树的磁盘读写代价更低；B+树的查询效率更加稳定</li><li>B 树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以 B+树更加适合在区间查询的情况，所以通常 B+树用于数据库索引，而 B 树则常用于文件索引。B 树由于 B 树的每一个节点都包含 key 和 value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。</li></ol></li></ol><p><strong>B+、B-树对比</strong></p><ol><li>B-Tree 因为非叶子结点也保存具体数据，所以在查找某个关键字的时候找到即可返回。而 B+Tree 所有的数据都在叶子结点，每次查找都得到叶子结点。所以在同样高度的 B-Tree 和 B+Tree 中，B-Tree 查找某个关键字的效率更高</li><li>由于 B+Tree 所有的数据都在叶子结点，并且结点之间有指针连接，在找大于某个关键字或者小于某个关键字的数据的时候，B+Tree 只需要找到该关键字然后沿着链表遍历就可以了，而 B-Tree 还需要遍历该关键字结点的根结点去搜索。</li><li>由于 B-Tree 的每个结点（这里的结点可以理解为一个数据页）都存储主键+实际数据，而 B+Tree 非叶子结点只存储关键字信息，而每个页的大小是有限的，所以同一页能存储的 B-Tree 的数据会比 B+Tree 存储的更少。这样同样总量的数据，B-Tree 的深度会更大，增大查询时的磁盘 I/O 次数，进而影响查询效率。</li></ol>',24),ca={href:"https://mp.weixin.qq.com/s/ActS6PxbtZGqPb0jOn0iFg",target:"_blank",rel:"noopener noreferrer"},Ea={href:"https://blog.csdn.net/qq_17612199/article/details/50944413",target:"_blank",rel:"noopener noreferrer"},ua={href:"https://www.iteye.com/topic/614070",target:"_blank",rel:"noopener noreferrer"},ha={href:"https://hxraid.iteye.com/blog/611105",target:"_blank",rel:"noopener noreferrer"},ka=l('<h1 id="jdbc-进阶" tabindex="-1"><a class="header-anchor" href="#jdbc-进阶" aria-hidden="true">#</a> JDBC 进阶</h1><h2 id="jdbc-的反射-反射都是什么" tabindex="-1"><a class="header-anchor" href="#jdbc-的反射-反射都是什么" aria-hidden="true">#</a> JDBC 的反射，反射都是什么？</h2><h2 id="jdo-是什么" tabindex="-1"><a class="header-anchor" href="#jdo-是什么" aria-hidden="true">#</a> Jdo 是什么?</h2><h2 id="statement-和-preparedstatement-有什么区别-哪个性能更好" tabindex="-1"><a class="header-anchor" href="#statement-和-preparedstatement-有什么区别-哪个性能更好" aria-hidden="true">#</a> Statement 和 PreparedStatement 有什么区别？哪个性能更好？</h2><h2 id="使用-jdbc-操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能" tabindex="-1"><a class="header-anchor" href="#使用-jdbc-操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能" aria-hidden="true">#</a> 使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</h2><h1 id="数据库优化扩展" tabindex="-1"><a class="header-anchor" href="#数据库优化扩展" aria-hidden="true">#</a> 数据库优化扩展</h1>',6),ma={href:"https://mp.weixin.qq.com/s/_bk2JVOm2SkXfdcvki6-0w",target:"_blank",rel:"noopener noreferrer"},Ba=l(`<h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p>概念：索引其实是一种数据结构，能够帮助我们快速的检索数据库中的数据</p><p>索引数据结构：Hash 索引和 B+ Tree 索引。InnoDB 引擎，默认的是 B+树</p><h2 id="b-tree-索引和-hash-索引区别" tabindex="-1"><a class="header-anchor" href="#b-tree-索引和-hash-索引区别" aria-hidden="true">#</a> B+Tree 索引和 Hash 索引区别</h2><ul><li>哈希索引适合等值查询，但是无法进行范围查询。因为只需要经过一次算法即可找到相应的键值；当然了，这个前提是，键值都是唯一的。</li><li>哈希索引不适合范围查询检索。因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了</li><li>哈希索引没办法利用索引完成排序，以及 like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）</li><li>哈希索引不支持多列联合索引的最左匹配规则</li><li>如果有大量重复键值的情况下，哈希索引的效率会很低，因为存在哈希碰撞问题</li></ul><h2 id="非主键索引查询数据时是否每次需要回表查询多次-覆盖索引的概念" tabindex="-1"><a class="header-anchor" href="#非主键索引查询数据时是否每次需要回表查询多次-覆盖索引的概念" aria-hidden="true">#</a> 非主键索引查询数据时是否每次需要回表查询多次，覆盖索引的概念</h2><p>不是的，通过覆盖索引也可以只查询一次</p><p><strong>覆盖索引</strong></p><p>覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。</p><p>当一条查询语句符合覆盖索引条件时，MySQL 只需要通过索引就可以返回查询所需要的数据，这样避免了查到索引后再返回表操作，减少 I/O 提高效率。</p><p>如，表 <code>covering_index_sample</code> 中有一个普通索引 <code>idx_key1_key2(key1,key2)</code>。 当我们通过 SQL 语句：<code>select key2 from covering_index_sample where key1 = &#39;keytest&#39;</code> 的时候，就可以通过覆盖索引查询，无需回表。</p><h2 id="联合索引多个字段顺序如何选择" tabindex="-1"><a class="header-anchor" href="#联合索引多个字段顺序如何选择" aria-hidden="true">#</a> 联合索引多个字段顺序如何选择</h2><p>在创建多列索引时，我们根据业务需求，where 子句中使用最频繁的一列放在最左边。</p><p>因为 MySQL 索引查询会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。所以当我们创建一个联合索引的时候，如 (key1,key2,key3)，相当于创建了(key1)、(key1,key2) 和 (key1,key2,key3) 三个索引，这就是最左匹配原则。</p><h2 id="线上-mysql-版本-mysql5-6-中索引的优化索引下推-icp-原理" tabindex="-1"><a class="header-anchor" href="#线上-mysql-版本-mysql5-6-中索引的优化索引下推-icp-原理" aria-hidden="true">#</a> 线上 MySQL 版本，MySQL5.6 中索引的优化索引下推(ICP)原理</h2><p>概念：是 MySQL 中一个常用的优化，尤其是当 MySQL 需要从一张表里检索数据时。 如果没有 ICP，存储引擎将会根据 WHERE 子句的条件遍历整个表单数据，然后返回给 MySQL 服务器。启用 ICP，如果可以通过使用索引的列来满足 WHERE 条件，MySQL 服务器将 WHERE 条件的这部分推送到存储引擎。然后，存储引擎通过使用索引来确定推送的条件，并且通过这样的方式从表中读取行。</p><p><strong>举例：</strong></p><p>people 表中（zipcode，lastname，firstname）构成一个索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> people
<span class="token keyword">WHERE</span> zipcode<span class="token operator">=</span><span class="token string">&#39;95054&#39;</span>
<span class="token operator">AND</span> lastname <span class="token operator">LIKE</span> <span class="token string">&#39;%etrunia%&#39;</span>
<span class="token operator">AND</span> address <span class="token operator">LIKE</span> <span class="token string">&#39;%Main Street%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有使用索引下推技术，则 MySQL 会通过 zipcode=&#39;95054&#39; 从存储引擎中查询对应的数据，返回到 MySQL 服务端，然后 MySQL 服务端基于 <code>LIKE</code> 条件来判断数据是否符合条件。</p><p>如果使用了索引下推技术，则 MySQL 首先会返回符合 zipcode=&#39;95054&#39; 的索引，然后根据 lastname LIKE &#39;%etrunia%&#39;和 address LIKE &#39;%Main Street%&#39; 来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接拒绝掉。有了索引下推优化，可以在有 <code>LIKE</code> 条件查询的情况下，减少回表次数。</p><h2 id="查询优化器" tabindex="-1"><a class="header-anchor" href="#查询优化器" aria-hidden="true">#</a> 查询优化器</h2><p>一条 SQL 语句的查询，可以有不同的执行方案，至于最终选择哪种方案，需要通过优化器进行选择，选择执行成本最低的方案。在一条单表查询语句真正执行之前，MySQL 的查询优化器会找出执行该语句所有可能使用的方案，对比之后找出成本最低的方案。</p><p>这个成本最低的方案就是所谓的执行计划。优化过程大致如下：</p><ol><li>根据搜索条件，找出所有可能使用的索引</li><li>计算全表扫描的代价</li><li>计算使用不同索引执行查询的代价</li><li>对比各种执行方案的代价，找出成本最低的那一个</li></ol><h2 id="mysql-锁" tabindex="-1"><a class="header-anchor" href="#mysql-锁" aria-hidden="true">#</a> MySQL 锁</h2><h3 id="共享锁-s-锁-和排他锁-x-锁" tabindex="-1"><a class="header-anchor" href="#共享锁-s-锁-和排他锁-x-锁" aria-hidden="true">#</a> 共享锁(S 锁)和排他锁(X 锁)</h3>`,27),Aa={href:"https://yq.aliyun.com/articles/646976",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://blog.csdn.net/qq_37435078/article/details/90243377",target:"_blank",rel:"noopener noreferrer"},ya=l(`<ul><li>事务拿到某一行记录的共享 S 锁，才可以读取这一行，并阻止别的事物对其添加 X 锁</li><li>事务拿到某一行记录的排它 X 锁，才可以修改或者删除这一行</li><li>共享锁的目的是提高读读并发</li><li>排他锁的目的是为了保证数据的一致性</li></ul><h3 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁" aria-hidden="true">#</a> 意向锁</h3><p><strong>意向共享锁(IS 锁)</strong>：表示一个事务倾向于对表中的部分行设置共享锁</p><p><strong>意向排他锁(IX 锁)</strong>：表示一个事务倾向于对表中的部分行设置排它锁</p><p><strong>意向锁意义</strong></p><ul><li>IX，IS 是表级锁，不会和行级的 X，S 锁发生冲突。只会和表级的 X，S 发生冲突</li><li>意向锁是在添加行锁之前添加。</li><li>如果没有意向锁，当向一个表添加表级 X 锁时，就需要遍历整张表来判断是否存行锁，以免发生冲突</li><li>如果有了意向锁，只需要判断该意向锁与表级锁是否兼容即可。</li></ul><p>例如，<code>SELECT ... FOR SHARE</code> 会设置 IS 锁，<code>SELECT ... FOR UPDATE</code> 会设置 IX 锁</p><p>意向锁的协议如下：</p><ul><li>在事务可以获取表中某行的共享锁之前，必须先在表上获取 IS 锁，或表上更强的锁</li><li>在事务可以获取表中某些行的排它锁之前，必须先在表上获取 IX 锁</li></ul><p><strong>兼容性：</strong></p><table><thead><tr><th>兼容性</th><th>IS</th><th>IX</th><th>S</th><th>X</th></tr></thead><tbody><tr><td>IS</td><td>兼容</td><td>兼容</td><td>兼容</td><td>互斥</td></tr><tr><td>IX</td><td>兼容</td><td>兼容</td><td>互斥</td><td>互斥</td></tr><tr><td>S</td><td>兼容</td><td>互斥</td><td>互斥</td><td>互斥</td></tr><tr><td>X</td><td>互斥</td><td>互斥</td><td>互斥</td><td>互斥</td></tr></tbody></table><h3 id="插入意向锁" tabindex="-1"><a class="header-anchor" href="#插入意向锁" aria-hidden="true">#</a> 插入意向锁</h3><p>插入意向锁是间隙锁的一种，针对 insert 操作产生。目的是提高插入并发。</p><p>多个事物，<strong>在同一个索引，同一个范围区间</strong>进行插入记录的时候，如果插入的位置不冲突，不会阻塞彼此。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>t1<span class="token punctuation">(</span>id <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>id1 <span class="token keyword">int</span><span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> id1  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+</span>
<span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span>   <span class="token number">20</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">30</span> <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>                             mysql<span class="token operator">&gt;</span> <span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                  Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                   Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span>                              mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+------+                                         +----+------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> id1  <span class="token operator">|</span>                                         <span class="token operator">|</span> id <span class="token operator">|</span> id1  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+                                         +----+------+</span>
<span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span>                                         <span class="token operator">|</span> <span class="token number">10</span> <span class="token operator">|</span>   <span class="token number">10</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">11</span> <span class="token operator">|</span>   <span class="token number">11</span> <span class="token operator">|</span>                                         <span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">|</span>   <span class="token number">12</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span>   <span class="token number">20</span> <span class="token operator">|</span>                                         <span class="token operator">|</span> <span class="token number">20</span> <span class="token operator">|</span>   <span class="token number">20</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">30</span> <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>                                         <span class="token operator">|</span> <span class="token number">30</span> <span class="token operator">|</span>   <span class="token number">30</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+------+                                         +----+------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>                              <span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="记录锁" tabindex="-1"><a class="header-anchor" href="#记录锁" aria-hidden="true">#</a> 记录锁</h3><p>是对索引记录的锁定。例如，<code>SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE;</code> 会阻止其他事务的插入、更新以及删除 t 表中 c1 = 10 的行。即使表中没有任何索引，MySQL 会自动创建一个隐式的 row_id 作为聚集索引来进行加锁。</p><h3 id="间隙锁-gap-锁" tabindex="-1"><a class="header-anchor" href="#间隙锁-gap-锁" aria-hidden="true">#</a> 间隙锁(gap 锁)</h3><p>间隙锁，锁定的是索引记录之间的间隙，或是第一个索引之前以及最后一个索引之后的间隙，如 <code>SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE;</code> 会阻止其他事务将值 15 插入到 t.c1 中，无论该列是否存在任何这样的值，因为该范围内的任何存在的值都会被锁定。</p><p>间隙锁主要出现在 RR(可重复读) 隔离级别，避免出现幻读。</p><p>针对当前读，RR 隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，不存在幻读现象。</p><h3 id="临键锁-next-key-locks" tabindex="-1"><a class="header-anchor" href="#临键锁-next-key-locks" aria-hidden="true">#</a> 临键锁(Next-Key Locks)</h3><p>临键锁是记录锁和间隙锁的组合，既锁住了记录也锁住了范围。临键锁的主要目的，也是为了避免幻读。如果把事务的隔离级别降级为 RC，临键锁就也会失效。</p><p>通常情况下，InnoDB 在搜索或扫描索引的行锁机制中使用临键锁(next-key locking)算法来锁定某索引记录及其前部的间隙(gap)，以阻塞其它用户紧跟在该索引记录之前插入其它索引记录。</p><h2 id="dml-和-ddl-语句" tabindex="-1"><a class="header-anchor" href="#dml-和-ddl-语句" aria-hidden="true">#</a> DML 和 DDL 语句</h2><p>DML：数据操纵语句，<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>；</p><p>DDL：数据定义语言，<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code></p><p>DCL：数据控制语句，<code>GRANT</code>、<code>RECVOKE</code></p><h2 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc" aria-hidden="true">#</a> MVCC</h2>`,29),_a={href:"https://my.oschina.net/u/2611678/blog/1626038",target:"_blank",rel:"noopener noreferrer"},va={href:"https://blog.csdn.net/w2064004678/article/details/83012387",target:"_blank",rel:"noopener noreferrer"},ga=l('<p>并发控制主要通过锁和 MVCC 来实现，MVCC 即多版本并发控制。</p><p><strong>概念：</strong></p><p>多版本并发控制其实就是在每一行记录的后面增加两个隐藏列，记录创建版本号和删除版本号，而每一个事务在启动的时候，都有一个唯一的递增的版本号。</p><ol><li>在插入操作时：记录的创建版本号就是事务版本号</li><li>在更新操作的时候，先标记旧的那行记录为已删除，并且删除版本号是事务版本号，然后插入一行新的记录的方式</li><li>删除操作的时候，就把事务版本号作为删除版本号</li><li>在查询时要符合以下两个条件的记录才能被事务查询出来： <ul><li>删除版本号未指定或者大于当前事务版本号，即查询事务开启后确保读取的行未被删除。</li><li>创建版本号小于或者等于当前事务版本号，就是说记录创建是在事务中（等于的情况）或者事务启动之前。</li></ul></li></ol><p>版本号可以减少锁的争用。另外，只有 RC 和 RR 两种事务隔离级别才能使用 MVCC</p><p>read-uncommited 由于是读到未提交的，所以不存在版本的问题，而 serializable 则会对所有读取的行加锁。</p><h2 id="innodb-中常见-sql-语句设置的锁类型" tabindex="-1"><a class="header-anchor" href="#innodb-中常见-sql-语句设置的锁类型" aria-hidden="true">#</a> Innodb 中常见 SQL 语句设置的锁类型</h2>',7),fa={href:"https://yq.aliyun.com/articles/698176",target:"_blank",rel:"noopener noreferrer"},wa=l(`<p><strong>select … from</strong></p><p>除了 serializable 隔离级别，这种 SQL 都是一致性非锁定读，不加锁；在 serializable 级别，这种 SQL 加 next-key 锁。</p><p><strong>select … from … for update</strong></p><p>这种 SQL 加 X 类型的 next-key 锁。</p><p><strong>update … where …</strong></p><p>RR 及其以上隔离级别下，该语句会加 next-key 锁；在 RC 级别，只加 record 锁。</p><p><strong>delete from … where …</strong></p><p>RR 及其以上隔离级别下，该语句会加 next-key 锁；在 RC 级别，只加 record 锁。</p><p><strong>insert … values …</strong></p><p>只会在它插入的行上加 X 锁，而不会加 next-key 锁。</p><h2 id="什么情况下-innodb-加表锁" tabindex="-1"><a class="header-anchor" href="#什么情况下-innodb-加表锁" aria-hidden="true">#</a> 什么情况下 innodb 加表锁</h2><p>InnoDB 行锁是通过索引上的索引项来实现的。InnoDB 这种行锁实现特点意味者：只有通过索引条件检索数据，InnoDB 才会使用行级锁，否则，InnoDB 将使用表锁</p><p>行级锁变为表级锁情况如下：如果一条 SQL 语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住。</p><h2 id="mysql-索引命中规则" tabindex="-1"><a class="header-anchor" href="#mysql-索引命中规则" aria-hidden="true">#</a> MySQL 索引命中规则</h2><p>规则很多，例如：</p><ol><li>没有查询条件或者查询条件没有索引</li><li>查询条件使用函数在索引列上，或者索引列参与计算</li><li>隐式转化导致索引失效，例如 mysql 隐式的将数值类型转换成了字符串类型，以匹配表</li><li>&lt;&gt;、!=、like 模糊查询 % 在前</li><li>联合索引不遵循最左匹配原则</li></ol><h2 id="一、单表操作" tabindex="-1"><a class="header-anchor" href="#一、单表操作" aria-hidden="true">#</a> 一、单表操作</h2><h3 id="_1-查找最晚入职员工的所有信息" tabindex="-1"><a class="header-anchor" href="#_1-查找最晚入职员工的所有信息" aria-hidden="true">#</a> 1. 查找最晚入职员工的所有信息</h3><h4 id="max" tabindex="-1"><a class="header-anchor" href="#max" aria-hidden="true">#</a> <code>max()</code></h4><p>返回一列中的最大值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees
<span class="token keyword">where</span> hire_date <span class="token operator">=</span>
<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>hire_date<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查找入职员工时间排名倒数第三的员工所有信息" tabindex="-1"><a class="header-anchor" href="#_2-查找入职员工时间排名倒数第三的员工所有信息" aria-hidden="true">#</a> 2.查找入职员工时间排名倒数第三的员工所有信息</h3><h4 id="select-distinct" tabindex="-1"><a class="header-anchor" href="#select-distinct" aria-hidden="true">#</a> <code>select distinct</code></h4>`,23),Da={href:"http://www.w3school.com.cn/sql/sql_distinct.asp",target:"_blank",rel:"noopener noreferrer"},Ca=l(`<h4 id="order-by" tabindex="-1"><a class="header-anchor" href="#order-by" aria-hidden="true">#</a> <code>order by</code></h4><p>默认根据指定的列对结果集进行升序排序，降序可使用 <code>desc</code> 关键字</p><h4 id="limit-m-n" tabindex="-1"><a class="header-anchor" href="#limit-m-n" aria-hidden="true">#</a> <code>limit m,n</code></h4><p>从第 m+1 条开始，取 n 条数据；</p><h4 id="limit-n" tabindex="-1"><a class="header-anchor" href="#limit-n" aria-hidden="true">#</a> <code>limit n</code></h4><p>从第 0 条开始，取 n 条数据，是 limit(0,n)的缩写。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees
<span class="token keyword">where</span> hire_date <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token keyword">distinct</span> hire_date <span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-查找薪水涨幅超过-15-次的员工号-emp-no-以及其对应的涨幅次数-t" tabindex="-1"><a class="header-anchor" href="#_3-查找薪水涨幅超过-15-次的员工号-emp-no-以及其对应的涨幅次数-t" aria-hidden="true">#</a> 3. 查找薪水涨幅超过 15 次的员工号 emp_no 以及其对应的涨幅次数 t</h3><h4 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> <code>count(*)</code></h4><p>返回表中的记录数</p><h4 id="count-column-name" tabindex="-1"><a class="header-anchor" href="#count-column-name" aria-hidden="true">#</a> <code>count(column_name)</code></h4><p>返回指定列的值的数目（NULL 不计入）</p><h4 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> <code>having</code></h4><p>增加 <code>having</code> 子句原因是，<code>where</code> 关键字无法与合计函数一起使用</p><h4 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> <code>group by</code></h4><p>结合合计函数，根据一个或多个列对结果集进行分组。合计函数例如<code>count</code>，<code>sum</code>，<code>avg</code>，<code>max</code>，<code>min</code>等</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>emp_no<span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token keyword">from</span> salaries
<span class="token keyword">group</span> <span class="token keyword">by</span> emp_no
<span class="token keyword">having</span> t <span class="token operator">&gt;</span> <span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-找出所有员工当前-to-date-9999-01-01-具体的薪水-salary-情况-对于相同的薪水只显示一次-并按照逆序显示" tabindex="-1"><a class="header-anchor" href="#_4-找出所有员工当前-to-date-9999-01-01-具体的薪水-salary-情况-对于相同的薪水只显示一次-并按照逆序显示" aria-hidden="true">#</a> 4. 找出所有员工当前(to_date=&#39;9999-01-01&#39;)具体的薪水 salary 情况，对于相同的薪水只显示一次,并按照逆序显示</h3><h4 id="order-by-1" tabindex="-1"><a class="header-anchor" href="#order-by-1" aria-hidden="true">#</a> order by</h4><h4 id="group-by-代替-distinct" tabindex="-1"><a class="header-anchor" href="#group-by-代替-distinct" aria-hidden="true">#</a> <code>group by</code> 代替 <code>distinct</code></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> s<span class="token punctuation">.</span>salary
<span class="token keyword">from</span> salaries s
<span class="token keyword">where</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>salary <span class="token keyword">desc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于大表（大数据量）一般不用 distinct，使用 group by</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> s<span class="token punctuation">.</span>salary
<span class="token keyword">from</span> salaries s
<span class="token keyword">where</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>salary
<span class="token keyword">order</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>salary <span class="token keyword">desc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-从-titles-表获取按照-title-进行分组-每组个数大于等于-2-给出-title-以及对应的数目-t。" tabindex="-1"><a class="header-anchor" href="#_5-从-titles-表获取按照-title-进行分组-每组个数大于等于-2-给出-title-以及对应的数目-t。" aria-hidden="true">#</a> 5. 从 titles 表获取按照 title 进行分组，每组个数大于等于 2，给出 title 以及对应的数目 t。</h3><h4 id="count、group-by和-having-搭配使用" tabindex="-1"><a class="header-anchor" href="#count、group-by和-having-搭配使用" aria-hidden="true">#</a> <code>count</code>、<code>group by</code>和 <code>having</code> 搭配使用</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> title<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token keyword">as</span> t <span class="token keyword">from</span> titles
<span class="token keyword">group</span> <span class="token keyword">by</span> title
<span class="token keyword">having</span> t <span class="token operator">&gt;=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-从-titles-表获取按照-title-进行分组-每组个数大于等于-2-给出-title-以及对应的数目-t。注意对于重复的-emp-no-进行忽略。" tabindex="-1"><a class="header-anchor" href="#_6-从-titles-表获取按照-title-进行分组-每组个数大于等于-2-给出-title-以及对应的数目-t。注意对于重复的-emp-no-进行忽略。" aria-hidden="true">#</a> 6. 从 titles 表获取按照 title 进行分组，每组个数大于等于 2，给出 title 以及对应的数目 t。注意对于重复的 emp_no 进行忽略。</h3><h4 id="count-内部搭配-distinct-使用" tabindex="-1"><a class="header-anchor" href="#count-内部搭配-distinct-使用" aria-hidden="true">#</a> <code>count</code> 内部搭配 <code>distinct</code> 使用</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> title<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> emp_no<span class="token punctuation">)</span> <span class="token keyword">as</span> t
<span class="token keyword">from</span> titles
<span class="token keyword">group</span> <span class="token keyword">by</span> title
<span class="token keyword">having</span> t <span class="token operator">&gt;=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-查找-employees-表所有-emp-no-为奇数-且-last-name-不为-mary-的员工信息-并按照-hire-date-逆序排列" tabindex="-1"><a class="header-anchor" href="#_7-查找-employees-表所有-emp-no-为奇数-且-last-name-不为-mary-的员工信息-并按照-hire-date-逆序排列" aria-hidden="true">#</a> 7. 查找 employees 表所有 emp_no 为奇数，且 last_name 不为 Mary 的员工信息，并按照 hire_date 逆序排列</h3><h4 id="where-中使用条件判断" tabindex="-1"><a class="header-anchor" href="#where-中使用条件判断" aria-hidden="true">#</a> where 中使用条件判断</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees
<span class="token keyword">where</span> emp_no <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">and</span> last_name <span class="token operator">!=</span> <span class="token string">&#39;Mary&#39;</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-获取当前-to-date-9999-01-01-薪水第二多的员工的emp-no以及其对应的薪水salary" tabindex="-1"><a class="header-anchor" href="#_8-获取当前-to-date-9999-01-01-薪水第二多的员工的emp-no以及其对应的薪水salary" aria-hidden="true">#</a> 8. 获取当前（to_date=&#39;9999-01-01&#39;）薪水第二多的员工的emp_no以及其对应的薪水salary</h3><h4 id="order-by、limit-m-n" tabindex="-1"><a class="header-anchor" href="#order-by、limit-m-n" aria-hidden="true">#</a> order by、limit m,n</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> emp_no<span class="token punctuation">,</span> salary 
<span class="token keyword">from</span> salaries 
<span class="token keyword">where</span> to_date<span class="token operator">=</span><span class="token string">&#39;9999-01-01&#39;</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span>
<span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、多表操作" tabindex="-1"><a class="header-anchor" href="#二、多表操作" aria-hidden="true">#</a> 二、多表操作</h2><h3 id="_1-查找各个部门当前-to-date-9999-01-01-领导当前薪水详情以及其对应部门编号" tabindex="-1"><a class="header-anchor" href="#_1-查找各个部门当前-to-date-9999-01-01-领导当前薪水详情以及其对应部门编号" aria-hidden="true">#</a> 1. 查找各个部门当前(to_date=&#39;9999-01-01&#39;)领导当前薪水详情以及其对应部门编号</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> salaries s<span class="token punctuation">,</span> dept_manager d
<span class="token keyword">where</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">AND</span> d<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">AND</span> s<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> d<span class="token punctuation">.</span>emp_no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> <code>join</code></h4><p>如果表中有至少一个匹配，则返回行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> salaries s <span class="token comment">/*inner*/</span> <span class="token keyword">join</span> dept_manager d <span class="token keyword">on</span> s<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> d<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
  <span class="token operator">AND</span> d<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查找所有已经分配部门的员工的-last-name-和-first-name" tabindex="-1"><a class="header-anchor" href="#_2-查找所有已经分配部门的员工的-last-name-和-first-name" aria-hidden="true">#</a> 2. 查找所有已经分配部门的员工的 last_name 和 first_name</h3><h4 id="inner-join" tabindex="-1"><a class="header-anchor" href="#inner-join" aria-hidden="true">#</a> <code>inner join</code></h4><p>在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> dept_emp d <span class="token keyword">inner</span> <span class="token keyword">join</span> employees e
<span class="token keyword">on</span> d<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> e<span class="token punctuation">.</span>emp_no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-查找所有员工的-last-name-和-first-name-以及对应部门编号-dept-no-也包括展示没有分配具体部门的员工" tabindex="-1"><a class="header-anchor" href="#_3-查找所有员工的-last-name-和-first-name-以及对应部门编号-dept-no-也包括展示没有分配具体部门的员工" aria-hidden="true">#</a> 3. 查找所有员工的 last_name 和 first_name 以及对应部门编号 dept_no，也包括展示没有分配具体部门的员工</h3><h4 id="left-join" tabindex="-1"><a class="header-anchor" href="#left-join" aria-hidden="true">#</a> <code>left join</code></h4><p>从左表那里返回所有的行，即使在右表中没有匹配的行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_no
<span class="token keyword">from</span> employees e
<span class="token keyword">left</span> <span class="token keyword">join</span> dept_emp d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> d<span class="token punctuation">.</span>emp_no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-查找所有员工入职时候的薪水情况-给出-emp-no-以及-salary-并按照-emp-no-进行逆序" tabindex="-1"><a class="header-anchor" href="#_4-查找所有员工入职时候的薪水情况-给出-emp-no-以及-salary-并按照-emp-no-进行逆序" aria-hidden="true">#</a> 4. 查找所有员工入职时候的薪水情况，给出 emp_no 以及 salary， 并按照 emp_no 进行逆序</h3><p>salaries.emp_no 不唯一（因为号码为 emp_no 的员工会有多次涨薪的可能,注意到 salaries.from_date 和 employees.hire_date 的值应该要相等</p><h4 id="inner-join-1" tabindex="-1"><a class="header-anchor" href="#inner-join-1" aria-hidden="true">#</a> inner join</h4><h4 id="order-by-2" tabindex="-1"><a class="header-anchor" href="#order-by-2" aria-hidden="true">#</a> order by</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> s<span class="token punctuation">.</span>salary
<span class="token keyword">from</span> employees e
<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries s
<span class="token keyword">on</span> e<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> s<span class="token punctuation">.</span>emp_no
<span class="token operator">and</span> e<span class="token punctuation">.</span>hire_date <span class="token operator">=</span> s<span class="token punctuation">.</span>from_date
<span class="token keyword">order</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>emp_no <span class="token keyword">desc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-获取所有部门当前-manager-的当前薪水情况-给出-dept-no-emp-no-以及-salary-当前表示-to-date-9999-01-01" tabindex="-1"><a class="header-anchor" href="#_5-获取所有部门当前-manager-的当前薪水情况-给出-dept-no-emp-no-以及-salary-当前表示-to-date-9999-01-01" aria-hidden="true">#</a> 5. 获取所有部门当前 manager 的当前薪水情况，给出 dept_no, emp_no 以及 salary，当前表示 to_date=&#39;9999-01-01&#39;</h3><p>因为同一 emp_no 在 salaries 表中对应多条涨薪记录，而当 s.to_date = &#39;9999-01-01&#39;时是该员工当前的薪水记录</p><h4 id="inner-join-2" tabindex="-1"><a class="header-anchor" href="#inner-join-2" aria-hidden="true">#</a> inner join</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> d<span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span> d<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> s<span class="token punctuation">.</span>salary
<span class="token keyword">from</span> dept_manager <span class="token keyword">as</span> d
<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries <span class="token keyword">as</span> s
<span class="token keyword">on</span> d<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> s<span class="token punctuation">.</span>emp_no
<span class="token operator">and</span> d<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">and</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-获取所有非-manager-的员工-emp-no" tabindex="-1"><a class="header-anchor" href="#_6-获取所有非-manager-的员工-emp-no" aria-hidden="true">#</a> 6. 获取所有非 manager 的员工 emp_no</h3><h4 id="is-null" tabindex="-1"><a class="header-anchor" href="#is-null" aria-hidden="true">#</a> <code>is null</code></h4><p>判断某一列字段是否为 null 值</p><h4 id="left-join-替换-in" tabindex="-1"><a class="header-anchor" href="#left-join-替换-in" aria-hidden="true">#</a> <code>left join</code> 替换 <code>in</code></h4>`,62),qa={href:"http://www.w3school.com.cn/sql/sql_in.asp",target:"_blank",rel:"noopener noreferrer"},xa=l(`<p>在实际表查询中，尽量不用 <code>in</code>、<code>not in</code>操作符，可能会使索引失效</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> emp_no <span class="token keyword">from</span> employees
<span class="token keyword">where</span> emp_no
<span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> emp_no
        <span class="token keyword">from</span> dept_manager<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>emp_no <span class="token keyword">from</span> employees e
<span class="token keyword">left</span> <span class="token keyword">join</span> dept_manager d
<span class="token keyword">on</span> e<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> d<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> dept_no <span class="token operator">is</span> <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-获取所有员工当前的-manager-如果当前的-manager-是自己的话结果不显示-当前表示-to-date-9999-01-01-。结果第一列给出当前员工的-emp-no-第二列给出其-manager-对应的-manager-no" tabindex="-1"><a class="header-anchor" href="#_7-获取所有员工当前的-manager-如果当前的-manager-是自己的话结果不显示-当前表示-to-date-9999-01-01-。结果第一列给出当前员工的-emp-no-第二列给出其-manager-对应的-manager-no" aria-hidden="true">#</a> 7. 获取所有员工当前的 manager，如果当前的 manager 是自己的话结果不显示，当前表示 to_date=&#39;9999-01-01&#39;。结果第一列给出当前员工的 emp_no,第二列给出其 manager 对应的 manager_no</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <code>&lt;&gt;</code></h4><h4 id="inner-join-3" tabindex="-1"><a class="header-anchor" href="#inner-join-3" aria-hidden="true">#</a> inner join</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> m<span class="token punctuation">.</span>emp_no
<span class="token keyword">from</span> dept_emp e <span class="token keyword">inner</span> <span class="token keyword">join</span> dept_manager m
<span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_no <span class="token operator">=</span> m<span class="token punctuation">.</span>dept_no
<span class="token keyword">where</span> e<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">and</span> m<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">and</span> e<span class="token punctuation">.</span>emp_no <span class="token operator">&lt;&gt;</span> m<span class="token punctuation">.</span>emp_no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-获取所有部门中当前员工薪水最高的相关信息-给出-dept-no-emp-no-以及其对应的-salary" tabindex="-1"><a class="header-anchor" href="#_8-获取所有部门中当前员工薪水最高的相关信息-给出-dept-no-emp-no-以及其对应的-salary" aria-hidden="true">#</a> 8. 获取所有部门中当前员工薪水最高的相关信息，给出 dept_no, emp_no 以及其对应的 salary</h3><h4 id="inner-join-4" tabindex="-1"><a class="header-anchor" href="#inner-join-4" aria-hidden="true">#</a> inner join</h4><h4 id="group-by-1" tabindex="-1"><a class="header-anchor" href="#group-by-1" aria-hidden="true">#</a> group by</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> d<span class="token punctuation">.</span>dept_no<span class="token punctuation">,</span> s<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> salary
<span class="token keyword">from</span> salaries <span class="token keyword">as</span> s
<span class="token keyword">inner</span> <span class="token keyword">join</span> dept_emp <span class="token keyword">as</span> d
<span class="token keyword">on</span> d<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> s<span class="token punctuation">.</span>emp_no
<span class="token keyword">where</span> d<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">and</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> d<span class="token punctuation">.</span>dept_no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。" tabindex="-1"><a class="header-anchor" href="#_9-统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。" aria-hidden="true">#</a> 9. 统计出当前各个title类型对应的员工当前薪水对应的平均工资。结果给出title以及平均工资avg。</h3><h4 id="出现出前-要将二张表中的-to-date-字段约束" tabindex="-1"><a class="header-anchor" href="#出现出前-要将二张表中的-to-date-字段约束" aria-hidden="true">#</a> 出现<code>出前</code>，要将二张表中的 <code>to_date</code> 字段约束</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> t<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> 
<span class="token keyword">from</span> titles t <span class="token keyword">inner</span> <span class="token keyword">join</span> salaries s 
<span class="token keyword">on</span> t<span class="token punctuation">.</span>emp_no <span class="token operator">=</span> s<span class="token punctuation">.</span>emp_no
<span class="token operator">AND</span> s<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token operator">AND</span> t<span class="token punctuation">.</span>to_date <span class="token operator">=</span> <span class="token string">&#39;9999-01-01&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> title
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-查找当前薪水-to-date-9999-01-01-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name-不准使用order-by" tabindex="-1"><a class="header-anchor" href="#_10-查找当前薪水-to-date-9999-01-01-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name-不准使用order-by" aria-hidden="true">#</a> 10. 查找当前薪水(to_date=&#39;9999-01-01&#39;)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16);function Sa(La,Fa){const e=p("ExternalLinkIcon");return i(),r("div",null,[o(" TOC "),c,o(" /TOC "),E,a("p",null,[a("a",u,[n("数据库强推文"),s(e)])]),h,a("p",null,[a("a",k,[n("SQL 教程"),s(e)])]),m,B,a("p",null,[a("a",A,[n("表的垂直拆分和水平拆分"),s(e)])]),b,a("p",null,[a("a",y,[n("B+Tree 树、B 树参考文章"),s(e)])]),_,a("p",null,[a("a",v,[n("索引参考文章"),s(e)])]),g,a("p",null,[a("a",f,[n("索引参考文章 1"),s(e)])]),a("p",null,[a("a",w,[n("索引参考文章 2"),s(e)])]),a("p",null,[a("a",D,[n("数据库强推文"),s(e)])]),C,a("p",null,[a("a",q,[n("最左匹配原则介绍"),s(e)])]),a("p",null,[a("a",x,[n("索引使用注意"),s(e)])]),S,a("p",null,[a("a",L,[n("主从复制参考文章"),s(e)])]),F,M,a("p",null,[a("a",I,[n("leftjoin 和 rightjoin 参考文章"),s(e)])]),T,R,a("ol",null,[j,a("li",null,[n("delete 语句 "),a("ol",null,[Q,N,a("li",null,[n("使用"),a("a",O,[n("optimize table"),s(e)]),n("来优化表。truncate table 删除表后，optimize table 尤其重要，特别是大数据数据库，表空间可以得到释放")])])]),P,H]),X,a("ol",null,[U,a("li",null,[n("mysql 是否扫描额外的纪录。查询是否扫描了过多的数据。最简单的衡量查询开销三个指标如下：响应时间；扫描的行数；返回的行数。这三个指标都会记录到 mysql 的"),a("a",W,[n("慢日志"),s(e)]),n("中，所以检查慢日志记录是找出扫描行数过多的查询的好办法。 如果发现查询需要扫描大量的数据但只返回少数的行，那么通常可以尝试下面的技巧去优化它： "),V]),K]),J,a("p",null,[a("a",z,[n("数据库强推文"),s(e)])]),Y,a("p",null,[a("a",G,[n("慢日志"),s(e)])]),a("p",null,[a("a",$,[n("慢日志+explain 查询分析"),s(e)])]),Z,a("p",null,[a("a",aa,[n("MYSQL 中使用 SHOW PROFILE 命令分析性能的用法整理"),s(e)])]),a("p",null,[a("a",na,[n("Mysql 查询缓存"),s(e)])]),ea,a("p",null,[a("a",sa,[n("MySQL 如何选择 float, double, decimal"),s(e)])]),la,a("p",null,[a("a",oa,[n("mysql 的 varchar 与 text 对比"),s(e)])]),ta,a("p",null,[a("a",ia,[n("MySQL 中 datetime 和 timestamp 的区别与选择"),s(e)])]),ra,a("p",null,[a("a",pa,[n("参考"),s(e)])]),da,a("p",null,[a("a",ca,[n("不懂数据库索引的底层原理？那是因为你心里没点 b 树"),s(e)])]),a("p",null,[a("a",Ea,[n("各种树概念"),s(e)])]),a("p",null,[a("a",ua,[n("动态查找树比较"),s(e)])]),a("p",null,[a("a",ha,[n("B+、B-树"),s(e)])]),ka,a("p",null,[a("a",ma,[n("我以为我对 Mysql 索引很了解，直到我遇到了阿里的面试官"),s(e)])]),Ba,a("p",null,[a("a",Aa,[n("浅谈 MySQL 的七种锁"),s(e)])]),a("p",null,[a("a",ba,[n("MySQL 中 InnoDB 上的锁分类"),s(e)])]),ya,a("p",null,[a("a",_a,[n("数据库多版本并发控制"),s(e)])]),a("p",null,[a("a",va,[n("Mysql 中 MVCC 的使用及原理详解"),s(e)])]),ga,a("p",null,[a("a",fa,[n("Innodb 中常见 SQL 语句设置的锁类型"),s(e)])]),wa,a("p",null,[a("a",Da,[n("返回唯一不同的值"),s(e)])]),Ca,a("p",null,[a("a",qa,[n("IN"),s(e)]),n(" 操作符允许我们在 WHERE 子句中规定多个值。")]),xa])}const Ta=t(d,[["render",Sa],["__file","database.html.vue"]]);export{Ta as default};
