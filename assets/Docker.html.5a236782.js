import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{r as c,o as t,c as l,a as e,b as n,d as i,e as s}from"./app.2387606b.js";const d={},r=s('<h3 id="初识-docker" tabindex="-1"><a class="header-anchor" href="#初识-docker" aria-hidden="true">#</a> 初识 Docker</h3><div class="custom-container tip"><p class="custom-container-title">Docker 使用场景</p><p>试想有这样一个案例：</p><p>我们在公司研发了一个 APP，程序员在自己的电脑上搭建了一套环境开始写代码，写完之后如释重负，把代码交给了测试人员测试，测试人员又开始从头到尾搭建环境之后在进行测试。测试完成之后，测试人员又将代码交给运维人员，运维在从头到尾搭建环境，最终才可上线。然而，在反复搭建环境的过程中，往往会出现一系列“在别人的电脑上可以运行的，我的却不行”诸如此类的问题，使用 Docker 容器技术可以完美解决以上问题</p></div><p>Docker 是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。通过 Docker 可以轻松屏蔽环境差异，程序员只需要将自己的代码、开发环境、配置文件等内容使用 Docker 打包到一个容器中，测试和运维人员无需在进行环境搭建，拿来即用，真正做到“build once, run everywhere”</p><p>Docker 使用客户端-服务器架构, Docker 客户端与 Docker daemon （Docker 守护进程）对话，后者负责构建、运行和分发 Docker 容器。Docker 客户端和 Docker daemon 可以在同一系统上运行，或者也可以将 Docker 客户端连接到远程 Docker daemon。Docker 中有几个重要的概念：</p><ol><li><p>镜像（<code>Image</code>）：类似于虚拟机中的镜像，是一个包含有文件系统的面向 Docker 引擎的只读模板。可以简单理解为一个镜像即是一个可执行程序。</p></li><li><p>容器（<code>Container</code>）：类似于运行起来的进程，可以将其看作一个极简的 Linux 系统环境以及运行在其中的应用程序，有了“可执行程序” image 之后，将其加载到内存开始执行，即是所谓的 container。Docker 引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。</p></li><li><p>仓库（<code>Registry</code>）：类似于远程代码仓库，这里是镜像的仓库，是 Docker 用来集中存放镜像文件的地方。</p></li><li><p><code>Dockerfile</code>：是一个用来构建镜像 image 的文本文件。如果写程序需要源代码，那么写 image 就需要 dockerfile，dockerfile 就是 image 的源代码。</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202101516523.png" alt="image-20220210151652293" loading="lazy"></p></li></ol><p>当我们对 Docker 有了一个初步的认识之后，便可以使用 Docker 来执行构建、运行容器等操作。</p><h3 id="docker-安装与原理再探" tabindex="-1"><a class="header-anchor" href="#docker-安装与原理再探" aria-hidden="true">#</a> Docker 安装与原理再探</h3>',7),p=e("strong",null,"先决条件",-1),u={href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"noopener noreferrer"},m=s(`<ol><li><p>确定 CentOS 版本，要求CentOS 7 或者 CentOS 8</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-24-11-centos ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release</span>
<span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">&quot;CentOS Linux&quot;</span>
<span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">&quot;8 (Core)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>卸载旧版本 Docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装<code>yum-utils</code>软件包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置镜像的仓库，推荐使用国内阿里云仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 国内,推荐使用</span>
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
    
<span class="token comment"># 国外</span>
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装 Docker 社区版 <code>docker-ce</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>如果你想安装具体版本的 Docker ，需要执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce-<span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">&gt;</span> docker-ce-cli-<span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">&gt;</span> containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;VERSION_STRING&gt;</code>为版本号，例如 <code>docker-ce-18.09.1</code></p></div></li><li><p>测试是否安装成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-24-11-centos ~<span class="token punctuation">]</span><span class="token comment"># sudo docker version</span>
Client: Docker Engine - Community
<span class="token punctuation">..</span>.
Server: Docker Engine - Community
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动 Docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过运行 hello-world 镜像来验证 Docker 引擎是否已正确安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202101749035.png" alt="image-20220210174957901" loading="lazy"></p></li></ol><p><a id="_link_docker1">docker run命令经历了上图五步</a>：</p><ol><li><p>客户端发起 <code>docker run</code> 命令向 <code>Docker</code> 服务器端</p></li><li><p>服务器端守护进程查找本地系统是否有 <strong>hello-world</strong> 镜像存在</p></li><li><p>服务器端守护进程向 Docker 远程库（Docker Hub）寻找 <strong>hello-world</strong> 镜像</p></li><li><p>服务器端守护进程将远程 <strong>hello-world</strong> 镜像下载到本地系统</p></li><li><p>服务器端守护进程使用 <strong>hello-world</strong> 镜像创建了一个能够执行 <strong>hello-world</strong> 程序的容器 Container 并将该容器加载到内存运行（上文已说过，我们可以简单理解为镜像 Image 为一个可执行程序，容器 Container 为镜像 Image 加载到内存执行起来的一个进程）</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202101803105.png" alt="image-20220210180339988" loading="lazy"></p></li></ol><h3 id="docker-中关于镜像的基本操作" tabindex="-1"><a class="header-anchor" href="#docker-中关于镜像的基本操作" aria-hidden="true">#</a> Docker 中关于镜像的基本操作</h3>`,4),v={href:"https://docs.docker.com/engine/api/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},k=s(`<ol><li><p>查看 Docker Hub 中是否存在 CentOS 镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111102140.png" alt="image-20220211110231042" loading="lazy"></p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>Docker Hub 是 Docker 官方维护了一个公共镜像仓库 ，我们可以在 Docker Hub上下载镜像以及上传本地镜像</p></div></li><li><p>下载 CentOS 镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111109944.png" alt="image-20220211110959830" loading="lazy"></p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p><code>docker pull centos</code> 默认下载最近 latest 版本的镜像，如果你想下载指定版本的 CentOS 镜像，需要指定 <code>TAG</code>，一个镜像仓库可能会包含很多不同版本的镜像，使用<code>TAG</code>标签进行区分，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull centos:centos7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>centos7</code> 为指定的 <code>TAG</code>，在 Docker Hub 中可以寻找到具体版本的 CentOS 镜像 <code>TAG</code></p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111135863.gif" alt="pullcentos1" loading="lazy"></p></div></li><li><p>查看当前系统的镜像信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111142901.png" alt="image-20220211114228802" loading="lazy"></p><p>我们发现，通过 pull 命令已经将远程库的 CentOS 镜像下载到了本地电脑上了</p></li><li><p>删除镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># image_id 镜像 ID</span>
<span class="token comment"># REPOSITORY:TAG 镜像仓库名:TAG标签</span>
<span class="token function">docker</span> rmi image_id/REPOSITORY:TAG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="docker-中关于容器的基本操作" tabindex="-1"><a class="header-anchor" href="#docker-中关于容器的基本操作" aria-hidden="true">#</a> Docker 中关于容器的基本操作</h3><p>我们已经提到过，镜像 Image 相当于一个可执行程序，是一个只读模板，而容器 Container 类似于运行起来的进程。有了 “可执行程序” image 之后，将其加载到内存开始执行，即是所谓的 container。一个容器可以创建、启动、停止、删除，容器的基本操作主要包含如下</p>`,3),b=s(`<li><p>查看当前正在运行的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111800902.png" alt="image-20220211180059707" loading="lazy"></p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p><code>docker ps</code> 表示查看当前正在运行的容器，如果想查看所有的容器，包括未运行的容器，使用命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></li>`,1),h=s(`<p>新建容器并运行（流程和 <a href="#_link_docker1">hello-world</a> 同理）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> centos:latest /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),f={class:"custom-container tip"},y=s(`<p class="custom-container-title">知识点</p><p>1、<code>centos:latest</code>为镜像仓库名+镜像<code>TAG</code>，此处也可以替换为镜像 ID（Image Id，若本地系统存在该镜像），可替换为下图的 <code>5d0da3dc9764</code></p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111912784.png" alt="image-20220211191240713" loading="lazy"></p><p>2、<code>-it</code>是两个参数：<code>-i</code>和<code>-t</code>，前者表示打开并保持 stdout（标准输出，指的就是在命令行里，每次你输入指令后，终端上打印出来的那些话，那些反馈），后者表示分配一个伪输入终端</p><p>3、使用命令<code>exit</code>退出容器，退出容器后，此时容器的状态处于 Exited，而不是运行状态。若不使用 <code>exit</code>，而是使用<code>CTRL+p</code> <code>CTRL+q</code> 退出，此时容器的状态为 Up，表示容器在后台运行</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111932246.png" alt="image-20220211193259098" loading="lazy"></p><p>4、<code>/bin/bash</code>表示容器启动后运行 bash</p><p>5、可以使用参数<code>--name</code>为启动的容器指定一个名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token string">&quot;codinglife&quot;</span> <span class="token parameter variable">-it</span> centos:latest /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202111949979.png" alt="image-20220211194947869" loading="lazy"></p><p>注意每一次使用<code>docker run</code>命令都会新生成一个容器，容器的ID（Container id）不相同</p><p>6、使用参数<code>-d</code>可以使容器在后台运行，不进入伪终端，并返回容器id</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos:latest /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202112003364.png" alt="image-20220211200320260" loading="lazy"></p><p>使用<code>-d</code>参数后台运行一个容器，然而使用<code>docker ps</code>命令并没有查询到任何运行的容器，原因在于：docker 中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself</p>`,15),_=e("code",null,"docker run",-1),D={href:"https://docs.docker.com/engine/reference/commandline/docker/",target:"_blank",rel:"noopener noreferrer"},x=s(`<li><p>停止容器运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop container_id/container_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器启动后可以停止其运行，<code>container_id</code> 为容器 ID，<code>container_name</code> 为容器 Name</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202121057199.png" alt="image-20220212105747075" loading="lazy"></p></li><li><p>启动容器或者重启容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动容器</span>
<span class="token function">docker</span> start container_id/container_name
<span class="token comment"># 重启容器</span>
<span class="token function">docker</span> restart container_id/container_name
<span class="token comment"># 进入后台启动的容器</span>
<span class="token function">docker</span> attach container_name/container_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除指定容器, 不能删除正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> container_name/container_id
<span class="token comment"># 强制删除指定容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> container_name/container_id
<span class="token comment"># 删除所有已经停止的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),E=s(`<h3 id="dockerfile—新建自有镜像" tabindex="-1"><a class="header-anchor" href="#dockerfile—新建自有镜像" aria-hidden="true">#</a> Dockerfile—新建自有镜像</h3><p>我们已经了解了关于镜像和容器的基本操作，那么如何将自己的项目构建成 Docker 镜像以方便其它人员使用呢？Docker 中提供了两种方式构建自有镜像：<strong>修改已有镜像和使用 Dockerfile 创建镜像</strong></p><h4 id="使用-dockerfile-创建镜像" tabindex="-1"><a class="header-anchor" href="#使用-dockerfile-创建镜像" aria-hidden="true">#</a> 使用 Dockerfile 创建镜像</h4><p>Dockerfile 是一个用来构建镜像 Image 的文本文件，Docker 可以通过读取 Dockerfile 中的指令来自动构建镜像，使用 <code>docker build</code> 命令，我们可以创建一个连续执行多个命令行指令的自有镜像。Dockerfile 主要包含以下指令：</p><table><thead><tr><th style="text-align:left;">指令</th><th style="text-align:left;">语法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>FROM</strong></td><td style="text-align:left;"><code>FROM &lt;image&gt;</code><br><code>FROM &lt;image&gt;:&lt;tag&gt;</code></td><td>创建镜像使用的基础镜像</td></tr><tr><td style="text-align:left;"><strong>MAINTAINER</strong></td><td style="text-align:left;"><code>MAINTAINER &lt;name&gt;</code></td><td>镜像作者信息</td></tr><tr><td style="text-align:left;"><strong>RUN</strong></td><td style="text-align:left;"><code>RUN &lt;command&gt;</code></td><td>编译镜像运行的命令</td></tr><tr><td style="text-align:left;"><strong>EXPOSE</strong></td><td style="text-align:left;"><code>EXPOSE port</code></td><td>容器暴露端口号</td></tr><tr><td style="text-align:left;"><strong>ENV</strong></td><td style="text-align:left;"><code>ENV &lt;key&gt;=&lt;value&gt; ...</code></td><td>设置环境变量</td></tr><tr><td style="text-align:left;"><strong>WORKDIR</strong></td><td style="text-align:left;"><code>WORKDIR /path/to/workdir</code></td><td>指定容器的工作目录</td></tr><tr><td style="text-align:left;"><strong>VLOUME</strong></td><td style="text-align:left;"><code>VOLUME [&quot;/path/to/directory&quot;]</code></td><td>设置容器卷</td></tr><tr><td style="text-align:left;"><strong>ADD</strong></td><td style="text-align:left;"><code>ADD &lt;src&gt; &lt;dest&gt;</code></td><td>把本机的文件复制到镜像中，<br>src 是压缩文件会自动解压出来</td></tr><tr><td style="text-align:left;"><strong>COPY</strong></td><td style="text-align:left;"><code>COPY &lt;src&gt; &lt;dest&gt;</code></td><td>与 ADD 指令类似，<br>COPY 的是压缩包不会自动解压</td></tr><tr><td style="text-align:left;"><strong>CMD</strong></td><td style="text-align:left;"><code>CMD &lt;command&gt;</code></td><td>容器启动时要运行的命令，只有在执行<br><code>docker run</code>或者<code>docker start</code>命令时才<br>会运行，如果一个 Dockerfile有多条 CMD <br> 指令，那么只有文件最后一行的CMD指令 <br>才会生效</td></tr><tr><td style="text-align:left;"><strong>ENTRYPOINT</strong></td><td style="text-align:left;"><code>ENTRYPOINT &lt;command&gt;</code></td><td>与 CMD 类似，如果一个 Dockerfile 有多<br>条 CMD 指令，可以追加命令</td></tr></tbody></table><p>例如我们在 Linux 环境下构建一个 CentOS 镜像 mycentos01，并且该镜像包含一个 tomcat，步骤如下：</p><ol><li><p>准备安装所需文件：tomcat、JDK压缩包，创建 dockerfile 文件，放在同级目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-24-11-centos mydocker<span class="token punctuation">]</span><span class="token comment"># cd /opt/mydocker/</span>
<span class="token punctuation">[</span>root@VM-24-11-centos mydocker<span class="token punctuation">]</span><span class="token comment"># touch dockerfile</span>
<span class="token punctuation">[</span>root@VM-24-11-centos mydocker<span class="token punctuation">]</span><span class="token comment"># ls -a</span>
<span class="token builtin class-name">.</span>  <span class="token punctuation">..</span>  apache-tomcat-8.5.75.tar.gz  dockerfile  jdk-17_linux-x64_bin.tar.gz readme.txt
<span class="token punctuation">[</span>root@VM-24-11-centos mydocker<span class="token punctuation">]</span><span class="token comment"># </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写 dockerfile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> dockerfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>dockerfile 文件内容（按 <code>i</code> 编辑 ，按 <code>ESC</code> 退出编辑，按<code>Shift</code> + <code>:wq</code> 保存退出）：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> centos:latest</span>

<span class="token instruction"><span class="token keyword">MAINTAINER</span> codinglifevv&lt;wyj_program@163.com&gt;</span>

<span class="token comment"># 把宿主机当前上下文的 readme.txt 拷贝到容器/usr/local/路径下</span>
<span class="token instruction"><span class="token keyword">COPY</span> readme.txt /usr/local/readme.txt</span>

<span class="token comment"># 把 java 和 tomcat 添加到容器中（会自动解压）</span>
<span class="token instruction"><span class="token keyword">ADD</span> apache-tomcat-8.5.75.tar.gz /usr/local/</span>
<span class="token instruction"><span class="token keyword">ADD</span> jdk-17_linux-x64_bin.tar.gz /usr/local/</span>

<span class="token comment"># 设置工作目录, 即启动访问的初始位置</span>
<span class="token instruction"><span class="token keyword">ENV</span> MYPATH /usr/local </span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$MYPATH</span></span>

<span class="token comment"># 配置java和tomcat的环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME /usr/local/jdk-17.0.2             </span>
<span class="token instruction"><span class="token keyword">ENV</span> CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar</span>
<span class="token instruction"><span class="token keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-8.5.75             </span>
<span class="token instruction"><span class="token keyword">ENV</span> CATALINA_BASE /usr/local/apache-tomcat-8.5.75</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH <span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/bin</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># 容器启动后要执行的命令</span>
<span class="token instruction"><span class="token keyword">CMD</span> /usr/local/apache-tomcat-8.5.75/bin/catalina.sh run</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构建镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> codinglife/mytomcat01:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-t</code>参数镜像的名字及标签，<code>docker build</code> 最后面要有 <code>.</code> 符号</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202141457199.png" alt="image-20220214145702062" loading="lazy"></p></li><li><p>运行启动的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5566</span>:8080 <span class="token parameter variable">--name</span> mytomcat01 codinglife/mytomcat01:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数<code>-p</code>表示指定端口映射，格式为：<code>主机(宿主)端口 : 容器端口</code> （我们已经知道，可以将 Docker 容器看作一个极简的 Linux 系统环境以及运行在其中的应用程序，因此需要开启端口映射来访问容器中的应用程序）</p></li></ol><h4 id="修改已有镜像" tabindex="-1"><a class="header-anchor" href="#修改已有镜像" aria-hidden="true">#</a> 修改已有镜像</h4><p>当然，除了使用 dockerfile 文件构建自有镜像之外，还可以修改原有的镜像，之后将修改后的镜像提交为一个新的镜像。例如在一个 centos 镜像中安装git、vim方法如下：</p>`,9),O=s(`<li><p>运行一个 centos 容器，使用<code>-it</code>参数进入其伪终端</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-24-11-centos /<span class="token punctuation">]</span><span class="token comment"># docker run -it centos /bin/bash</span>
<span class="token comment"># 进入容器伪终端</span>
<span class="token punctuation">[</span>root@7c072f2eea68 /<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),A=s(`<p>在伪终端下安装 git 、vim</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@7c072f2eea68 /<span class="token punctuation">]</span><span class="token comment"># yum -y install git</span>
<span class="token punctuation">[</span>root@7c072f2eea68 /<span class="token punctuation">]</span><span class="token comment"># yum -y install vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),C={class:"custom-container tip"},I=s(`<p class="custom-container-title">Tips</p><p>1、官方的 centos 镜像伪终端类似一个极简的 Linux 系统，因此不包含许多命令，需要我们手动安装</p><p>2、以上命令也可以写在 dockerfile 文件中，使用 RUN 指令运行：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> yum -y install git</span>
<span class="token instruction"><span class="token keyword">RUN</span> yum -y install vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),M={href:"https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11WUg2mF",target:"_blank",rel:"noopener noreferrer"},N=s(`<li><p>使用<code>exit</code>退出容器，将容器转化为一个镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;centos with git and vim&quot;</span> <span class="token parameter variable">-a</span> <span class="token string">&quot;codinglife&quot;</span> 7c072f2eea68 codinglife/centos:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数<code>-m</code>对镜像进行一个简单的说明；参数<code>-a</code>指定提交镜像的作者信息；<code>7c072f2eea68</code>为被转化容器的 ID，<code>codinglife/centos:1.0</code>分别为目标镜像的用户名 / 仓库名 : tag 信息</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161650262.png" alt="image-20220216165023133" loading="lazy"></p></li><li><p>测试转化的镜像是否能够执行 git 操作</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161657275.png" alt="image-20220216165724145" loading="lazy"></p></li>`,2),S=e("h3",{id:"docker-数据持久化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-数据持久化","aria-hidden":"true"},"#"),n(" Docker 数据持久化")],-1),T=e("p",null,[n("Docker容器产生的数据，如果不通过"),e("code",null,"docker commit"),n("生成新的镜像，使得数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了，为了能保存数据在 Docker 中，Docker 使用数据卷（Data Volumes）、数据卷容器（Data Volumes Dontainers）来确保数据的持久化和同步。")],-1),j=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"Tips"),e("p",null,"数据卷就是数据(一个文件或者文件夹)，本质上对应的是宿主机的文件目录")],-1),w=e("p",null,"参考网址：",-1),R={href:"http://www.lining0806.com/%E6%95%B0%E6%8D%AE%E5%8D%B7%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.aliyun.com/article/622327?spm=a2c6h.13813017.content3.1.38d56878JxV9M9",target:"_blank",rel:"noopener noreferrer"},z={href:"https://segmentfault.com/a/1190000022274697",target:"_blank",rel:"noopener noreferrer"},H={href:"https://jiajially.gitbooks.io/dockerguide/content/chapter_fastlearn/docker_run/--volumes-from.html",target:"_blank",rel:"noopener noreferrer"},q=s(`<h4 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷" aria-hidden="true">#</a> 数据卷</h4><p>使用数据卷持久化一个 CentOS 容器数据操作如下：</p><ol><li><p>使用 <code>-v</code> 参数运行一个容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /opt/mydocker/myvolume:/opt/myvolume centos /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>参数<code>-v</code> 命令格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1、<code>-v /opt/mydocker/myvolume:/opt/myvolume</code>表示将宿主机目录和容器目录进行关联，关联之后，不论在宿主机目录下，还是容器内目录下修改文件，数据都会在两者之间同步</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202151157776.png" alt="image-20220215115726576" loading="lazy"></p><p>2、默认情况下，挂载文件权限是读写权限，也可使用<code>:ro</code> 参数指定只读权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /opt/mydocker/myvolume:/opt/myvolume:ro centos /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、可以使用具名挂载的方式来运行一个容器，该方式会为挂载卷进行自定义命名，匿名挂载方式 Docker 会为挂载卷生成一个很长的 16 进制数字</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 具名挂载格式: -v 卷名:容器内路径</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> codinglifev:/opt/myvolume centos /bin/bash
<span class="token comment"># 匿名挂载格式: -v 容器内路径</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /opt/myvolume centos /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202151711046.png" alt="image-20220215171110905" loading="lazy"></p><p>4、命令<code>docker volume ls</code> 可以查看挂载卷的信息，如果指定了容器内目录，命令查询不到任何挂载卷信息</p><p>5、如果不指定挂载卷的宿主机绝对路径目录，会默认存储在宿主机的<code>/var/lib/docker/volumes</code>目录下</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202151719541.png" alt="image-20220215171945416" loading="lazy"></p></div></li><li><p>查看数据是否挂载成功，容器内部详细</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># container_id 容器 ID</span>
<span class="token function">docker</span> inspect container_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202151635529.png" alt="image-20220215163540394" loading="lazy"></p></li><li><p>构建自有镜像时，设置数据卷</p><p>我们可以在构建自有镜像时为容器指定数据卷，例如构建一个简单的 CentOS 镜像，dockerfile 文件内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># dockerfile文件内容</span>
FROM centos
VOLUME <span class="token punctuation">[</span><span class="token string">&quot;/opt/myvolume01&quot;</span>,<span class="token string">&quot;/opt/myvolume02&quot;</span><span class="token punctuation">]</span>
CMD <span class="token builtin class-name">echo</span> <span class="token string">&quot;-------end--------&quot;</span>
CMD /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指令 <code>VOLUME</code> 指定设置数据卷的容器内目录</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202151801667.png" alt="image-20220215180156424" loading="lazy"></p></li><li><p>删除数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-v</span> 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="数据卷容器" tabindex="-1"><a class="header-anchor" href="#数据卷容器" aria-hidden="true">#</a> 数据卷容器</h4><p>通过数据卷可以实现容器内目录和宿主机目录之间数据同步，如果你有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。 数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载。数据卷容器的实现要求我们使用参数<code>--volumes-from</code>来实现一个继承关系，使用数据卷容器流程如下：</p><ol><li><p>构建一个数据卷容器（父容器），并为该容器添加一些数据（这里添加一个readme.txt文件）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> father <span class="token parameter variable">-v</span> /opt/myvolumn centos /bin/bash
<span class="token builtin class-name">cd</span> /opt/myvolumn/
<span class="token function">touch</span> readme.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构建挂载步骤 1 数据卷的容器（创建子容器继承父容器）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> son1 --volumes-from father centos
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> son2 --volumes-from father centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用参数<code>--volumes-from</code>来构建共享数据的容器，格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> 子容器名称 --volumes-from 父容器名称 image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现容器 son1 和 son2 同样有了 readme.txt 文件，实现了数据共享</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161212693.png" alt="image-20220216121223528" loading="lazy"></p></li><li><p>删除父容器，并在 son1 容器新增 readmeSon1.txt 文件，观察 son2 容器数据变化</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161227360.png" alt="image-20220216122704204" loading="lazy"></p><p>使用<code>--volumes-from</code>参数使多个容器共享数据之后，除非将所有共享数据的容器删除，否则容器之间一直会进行数据同步共享</p></li></ol><h3 id="将本地镜像推送到远程库-docker-hub" tabindex="-1"><a class="header-anchor" href="#将本地镜像推送到远程库-docker-hub" aria-hidden="true">#</a> 将本地镜像推送到远程库 Docker Hub</h3><p>当我们学会如何构建自有镜像之后，便可以将构建的镜像推送到 Docker Hub 上供其它人员使用了，流程如下：</p>`,8),L={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},P=s(`<li><p>利用命令docker login 登录DockerHub，输入用户名、密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Docker login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161454828.png" alt="image-20220216145414705" loading="lazy"></p></li><li><p>推送本地的镜像到 DockerHub 上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push wyjpro/mytomcat01:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意命令<code>push</code>后面的名称 <code>wyjpro</code>必须是你的 Docker Hub 登录用户名，否则推送会失败</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161549402.png" alt="image-20220216154941296" loading="lazy"></p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202161546141.png" alt="image-20220216154634005" loading="lazy"></p></li>`,2);function G(U,B){const a=c("ExternalLinkIcon");return t(),l("div",null,[r,e("p",null,[n("Docker可以安装在 Windows、Linux、Mac 等各个平台上，以 CentOS 为例，要在 CentOS 上开始使用 Docker 引擎，请确保满足"),p,n("：CentOS 版本要求 CentOS 7 或者 CentOS 8，然后在安装 Docker，更多安装方式可移步官方参考"),e("a",u,[n("Install Docker Engine | Docker Documentation"),i(a)]),n("，Linux 终端 CentOS 下安装 Docker 步骤如下：")]),m,e("p",null,[n("Docker 相关命令参考"),e("a",v,[n("Docker CLI"),i(a)])]),e("p",null,[n("当我们安装完 Docker 引擎之后，就可以对镜像 Image 进行基本的操作了。比如我们从"),e("a",g,[n("官方注册服务器"),i(a)]),n("的仓库中 Docker Hub 下载 CentOS 的镜像，流程如下：")]),k,e("ol",null,[b,e("li",null,[h,e("div",f,[y,e("p",null,[n("7、有关 "),_,n(" 的更多参数可以参考"),e("a",D,[n("docker | Docker Documentation"),i(a)])])])]),x]),E,e("ol",null,[O,e("li",null,[A,e("div",C,[I,e("p",null,[n("3、如果你的命令运行一直失败，可能是由于镜像源访问不到，可以在伪终端下重新安装阿里云镜像源，安装方式参考"),e("a",M,[n("centos镜像-centos下载地址-centos安装教程-阿里巴巴开源镜像站 (aliyun.com)"),i(a)])])])]),N]),S,T,j,w,e("ul",null,[e("li",null,[e("a",R,[n("Docker数据卷与数据卷容器"),i(a)])]),e("li",null,[e("a",V,[n("Docker系列教程14-Docker数据持久化"),i(a)])]),e("li",null,[e("a",z,[n("docker 入门到实战（五）docker容器数据卷"),i(a)])]),e("li",null,[e("a",H,[n("数据卷容器（--volumes-from） | Docker-guide (gitbooks.io)"),i(a)])])]),q,e("ol",null,[e("li",null,[e("p",null,[n("访问"),e("a",L,[n("Docker Hub"),i(a)]),n("，如果没有账号，需要先注册一个")])]),P])])}const F=o(d,[["render",G],["__file","Docker.html.vue"]]);export{F as default};
