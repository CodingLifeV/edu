import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as s,d as l,e as a,r as i}from"./app.009fa892.js";const o={},u=a(`<h3 id="异步任务" tabindex="-1"><a class="header-anchor" href="#异步任务" aria-hidden="true">#</a> 异步任务</h3><p>需求：在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，造成响应不动，直到邮件发送完毕，响应才会成功，所以一般会采用多线程的方式去处理类似任务。创建新的项目<code>springboot-task-first</code>，实现异步任务，流程如下：</p><ol><li><p>编写<code>Service</code>类<code>AsyncService</code>，该类实现一个<code>hello()</code>方法，模拟进行处理数据，需要用时3秒</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据处理中....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写<code>controller</code>类<code>AsyncController</code>，调用<code>Service</code>层<code>hello()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">AsyncService</span> asyncService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        asyncService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用方法, 等待 3 秒</span>
        <span class="token keyword">return</span> <span class="token string">&quot;OK&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试</p><p>发现前端需要等待3秒才会相应，可以使用多线程的方式让用户先得到消息，之后后台线程对数据进行处理，通过<code>@Async</code>注解实现，代码如下：</p></li><li><p>在需要处理数据的代码上加上<code>@Async</code>注解，在主程序上添加一个注解<code>@EnableAsync</code> ，开启异步注解功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 异步方法</span>
<span class="token annotation punctuation">@Async</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据处理中....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootTaskFirstApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootTaskFirstApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启测试，网页瞬间响应，后台代码在异步执行<code>hello()</code>方法</p></li></ol><h3 id="邮件任务" tabindex="-1"><a class="header-anchor" href="#邮件任务" aria-hidden="true">#</a> 邮件任务</h3><p><code>SpringBoot</code>发送邮件操作流程如下：</p><ol><li><p><code>pom</code>文件引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>application.properties</code>配置文件：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token value attr-value">1013801973@qq.com</span>
<span class="token key attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token value attr-value">bhhfkgvrzfuibaja</span>
<span class="token key attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token value attr-value">smtp.qq.com</span>
<span class="token comment"># QQ 邮箱需要配置 ssl</span>
<span class="token key attr-name">spring.mail.properties.mail.smtp.ssl.enable</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>password</code>为自己邮箱开启<code>SMTP</code>服务的授权码，需要要个人邮箱开启服务</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/springboot/image-20211231094853736.png" alt="image-20211231094853736" loading="lazy"></p></li><li><p>测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">SpringbootTaskFirstApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">JavaMailSenderImpl</span> javaMailSender<span class="token punctuation">;</span>

    <span class="token comment">// 发送简单邮件</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleMailMessage</span> mailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        mailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;狂神，你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;谢谢你的狂神说Java系列课程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        mailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">&quot;1637317579@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">&quot;1013801973@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 发送复杂邮件</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MessagingException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建复杂邮件</span>
        <span class="token class-name">MimeMessage</span> mimeMessage <span class="token operator">=</span> javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 组装 true-表示是否支持多消息发送, 文本、附件、内联元素等...</span>
        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//正文 true-表示是否支持 html 内容文本发送</span>
        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;狂神，你好~plus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p style=&#39;color:red&#39;&gt;谢谢你的狂神说Java系列课程&lt;/p&gt;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//附件</span>
        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;1.jpg&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Program Files\\\\workspace\\\\idea\\\\1.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">&quot;2.jpg&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Program Files\\\\workspace\\\\idea\\\\2.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">&quot;1637317579@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">&quot;1013801973@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/springboot/image-20211231103203307.png" alt="image-20211231103203307" loading="lazy"></p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/springboot/image-20211231103321612.png" alt="image-20211231103321612" loading="lazy"></p></li></ol><h3 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务" aria-hidden="true">#</a> 定时任务</h3><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨分析一次前一天的日志信息，<code>Spring</code>提供了异步执行任务调度的方式来实现定时任务。需要使用到两个接口：</p><ul><li><code>TaskExecutor</code>接口：任务执行者</li><li><code>TaskScheduler</code>接口：任务调度者</li></ul><p>两个注解：</p><ul><li><code>@EnableScheduling</code>：开启定时功能</li><li><code>@Scheduled</code>：定义执行时间</li></ul>`,11),d=n("code",null,"cron",-1),r={href:"http://www.bejson.com/othertools/cron/%EF%BC%89%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},k=a(`<table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">允许值</th><th style="text-align:center;">允许特殊字符</th></tr></thead><tbody><tr><td style="text-align:center;">秒</td><td style="text-align:center;">0-59</td><td style="text-align:center;">, - * /</td></tr><tr><td style="text-align:center;">分</td><td style="text-align:center;">0-59</td><td style="text-align:center;">, - * /</td></tr><tr><td style="text-align:center;">小时</td><td style="text-align:center;">0-23</td><td style="text-align:center;">, - * /</td></tr><tr><td style="text-align:center;">日期</td><td style="text-align:center;">1-31</td><td style="text-align:center;">, - * / ? L W C</td></tr><tr><td style="text-align:center;">月份</td><td style="text-align:center;">1-12</td><td style="text-align:center;">, - * /</td></tr><tr><td style="text-align:center;">星期</td><td style="text-align:center;">0-1或SUN-SAT 0,7是SUN</td><td style="text-align:center;">, - * / ? L W C</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">特殊字符</th><th style="text-align:center;">代表含义</th></tr></thead><tbody><tr><td style="text-align:center;">,</td><td style="text-align:center;">枚举</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">区间</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">任意</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">步长</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">日/星期冲突匹配</td></tr><tr><td style="text-align:center;">L</td><td style="text-align:center;">最后</td></tr><tr><td style="text-align:center;">W</td><td style="text-align:center;">工作日</td></tr><tr><td style="text-align:center;">C</td><td style="text-align:center;">和calendar练习后计算过的值</td></tr><tr><td style="text-align:center;">#</td><td style="text-align:center;">星期，4#2 第二个星期三</td></tr></tbody></table><p>测试步骤如下：</p><ol><li><p>创建一个<code>ScheduledService</code>类，定义一个需要定时执行的<code>hello()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在一个特定的时间执行这个方法——Timer</span>
    <span class="token comment">// cron表达式</span>
    <span class="token comment">// 秒 分 时 日 月 周几</span>

    <span class="token comment">/*
        0 49 11 * * ?       每天的 11 点 49 分 00 秒执行
        0 0/5 11,12 * * ?   每天的 11 点和 12 点每个五分钟执行一次
        0 15 10 ? * 1-6     每个月的周一到周六的 10 点 15 分执行一次
        0/2 * * * * ?       每 2 秒执行一次
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/2 * * * * ?&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello,你被执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在主程序上增加<code>@EnableScheduling</code> 开启定时任务功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAsync</span> <span class="token comment">//开启异步注解功能</span>
<span class="token annotation punctuation">@EnableScheduling</span> <span class="token comment">//开启基于注解的定时任务</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootTaskFirstApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootTaskFirstApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>测试，<code>hello()</code>方法每隔 2 秒被执行一次：</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/springboot/image-20211231104900760.png" alt="image-20211231104900760" loading="lazy"></p></li><li><p>常用的表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>（1）0/2 * * * * ?   表示每2秒 执行任务
（1）0 0/2 * * * ?   表示每2分钟 执行任务
（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务
（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业
（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作
（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点
（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时
（6）0 0 12 ? * WED   表示每个星期三中午12点
（7）0 0 12 * * ?   每天中午12点触发
（8）0 15 10 ? * *   每天上午10:15触发
（9）0 15 10 * * ?     每天上午10:15触发
（10）0 15 10 * * ?   每天上午10:15触发
（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发
（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发
（13）0 0/5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发
（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发
（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发
（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发
（18）0 15 10 15 * ?   每月15日上午10:15触发
（19）0 15 10 L * ?   每月最后一日的上午10:15触发
（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发
（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发
（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,4);function v(m,b){const t=i("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[d,s("表达式（定义定时任务执行规则，表达式生成器网址 "),n("a",r,[s("http://www.bejson.com/othertools/cron/）："),l(t)])]),k])}const h=e(o,[["render",v],["__file","springboot8.html.vue"]]);export{h as default};
