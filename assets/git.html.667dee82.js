import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as s,b as n,d as e,e as t,r as o}from"./app.b43555e3.js";const l={},u=s("h2",{id:"git-是什么",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#git-是什么","aria-hidden":"true"},"#"),n(" Git 是什么？")],-1),d=s("p",null,[s("strong",null,"Git 是分布式的版本控制系统"),n("。在我们项目开发过程中，往往会遇到这样的问题：")],-1),r=s("ul",null,[s("li",null,"在本地编写代码时，一旦你把代码改乱了，或者误删了某些文件，项目难以退回到之前未修改的模样"),s("li",null,"在本地编写代码时，担心项目修改出错，拷贝了许多份项目的副本，随着时间的推移，本地副本越来越多，已经忘记了哪些副本修改了哪些代码")],-1),m={href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"},g=s("h2",{id:"初次运行-git-前的配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#初次运行-git-前的配置","aria-hidden":"true"},"#"),n(" 初次运行 Git 前的配置")],-1),v=s("p",null,"安装好 Git 之后，我们需要在本地电脑上进行一些简单的配置，具体配置流程如下：",-1),k=t(`<p>打开 <strong>Git Bash</strong>，设置你的用户名和邮件地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;your_name&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email your_email@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b={class:"custom-container tip"},h=s("p",{class:"custom-container-title"},"知识点",-1),f=s("p",null,[n("1、Windows 系统安装 Git 之后，在桌面任何位置鼠标右击会出现 "),s("strong",null,"Git Bash Here"),n(" 选项，点击使用该命令窗口")],-1),y=s("img",{src:"https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202051930231.png",alt:"image-20220205193006177",width:"500"},null,-1),_={href:"https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home",target:"_blank",rel:"noopener noreferrer"},w={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>3、--global 选项表示为计算机上的每个仓库设置 Git 用户名，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想为某一个仓库设置不同的用户名，针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.name <span class="token string">&quot;your_name&quot;</span>
<span class="token function">git</span> config user.email your_email@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),G=t(`<li><p>生成新的 SSH 公钥</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;your_email@example.com&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061800953.png" alt="image-20220206180032784" width="600"></li><li><p>将新的 SSH 公钥添加到 GitHub 帐户中，首先使用以下命令将密钥信息复制到粘贴板：</p><p>:::: code-group</p><p>::: code-group-item Windows</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>clip <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p><p>::: code-group-item Mac:active</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pbcopy <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p><p>::: code-group-item Linux</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p><p>::::</p><p>之后登录 Github 账户，点击账户任何页面右上角个人资料图像 <strong>Setting</strong>，在侧边栏的 <strong>Access</strong> 部分，单击 <strong>SSH and GPS keys</strong>，点击 <strong>New SSH key</strong> 或者 <strong>Add SSH key</strong>，将上面复制的 SSH 公钥粘贴进去，并为该密钥起一个简短的标号 <strong>Title</strong></p><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>1、默认情况下，用户的 SSH 密钥存储在其 <code>~/.ssh</code> 目录下。 进入该目录并列出其中内容，你便可以快速确认自己是否已拥有密钥：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 测试</span>
wyj_p@DESKTOP-OHURAP1 MINGW32 ~/Desktop
<span class="token variable">$cd</span> ~/.ssh
wyj_p@DESKTOP-OHURAP1 MINGW32 ~/.ssh
$ <span class="token function">ls</span>
id_rsa  id_rsa.pub  known_hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在“标题” Title 字段中，为 SSH 密钥添加描述性标签， 例如，如果你使用的是个人 Mac，那么你可以将此 Title 命名为“个人电脑Win10”。</p></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061757920.png" alt="image-20220206175714778" loading="lazy"></p></li>`,2),x=t(`<h2 id="使用-git-提交本地项目到-github-仓库" tabindex="-1"><a class="header-anchor" href="#使用-git-提交本地项目到-github-仓库" aria-hidden="true">#</a> 使用 Git 提交本地项目到 Github 仓库</h2><p>当你对 Git 进行配置，以及拥有了 Github 账户之后，你便可以使用 Git 与 Github 管理你的项目了。试想有一个名为 <code>CodingLife</code> 的 Java 项目（只有一个<code>Test.java</code>文件），本地存储在名为 CodingLife 的文件夹中，<code>Test.java</code> 代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Test.java</span>
<span class="token comment">// 项目路径 D:\\CodingLife\\Test.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编写代码过程中，我们可以使用 Git 结合 Github 仓库来管理该项目，具体流程如下：</p><ol><li><p>创建一个新的 Github 仓库，名字为 project1</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061352994.png" alt="image-20220206135231827" width="600"></li><li><p>在项目文件下 CodingLife 下打开 Git Bash 窗口，初始化该文件夹，使其成为一个 Git 本地仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化完成后出现了一个 .git 文件夹，此时我们的 CodingLife 文件夹为<strong>工作区</strong>，.git 文件夹为 <strong>Git 版本库</strong>，Git 版本库中存在两个最重要的内容：<strong>暂存区</strong>（stage，或者叫 index），还有 Git 为我们自动创建的第一个分支 <code>master</code>，以及指向 <code>master</code> 的一个指针叫<code>HEAD</code>，如下图表示</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061537715.png" alt="image-20220206153740544" width="600"><p>使用 <code>git init</code> 命令的时候， Git 默认会在 <strong>.git</strong> 版本库中创建一个 <code>master</code> 分支</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061411038.png" alt="image-20220206141157951" loading="lazy"></p></li><li><p>把文件添加到版本库暂存区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用命令<code>git add .</code>会将工作区的 Test.java 文件添加到暂存区</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061559422.png" alt="image-20220206155904346" width="700"></li><li><p>把文件添加到版本库 master 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;项目CodingLife,版本v1.0,新增了Test.java文件&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061612595.png" alt="image-20220206161227478" width="700"><div class="custom-container tip"><p class="custom-container-title">Tips</p><p><code>git commit </code>命令，<code>-m</code> 后面输入的是本次提交内容的简单说明，建议输入有意义的内容，方便从历史记录里找到改动记录</p></div></li><li><p>将本地 Git 仓库 CodingLife 和远程 Github 仓库 project1 进行关联</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:CodingLifeVV/project1.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061941039.png" alt="image-20220206194144959" width="1000"><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>1、使用 <code>git remote add origin</code> 命令会将一个已有的本地仓库和一个 Github 仓库进行关联，关联之后即可以把本地仓库的内容推送到 Github 仓库中，<code>origin</code> 是远程的意思，origin 后需要添加你需要关联的Github仓库的地址信息，在你的 Github 仓库 <strong>Code</strong> 下拉选项中，可以选择复制 <strong>SSH key</strong> ，添加到 origin 之后。</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202082159219.png" alt="image-20220208215935104" width="350"><p>2、<code>git remote add origin</code> 命令只需要第一次推送到远程库的时候使用，之后在本地库修改完代码上传远程库的时候就不要要使用了。</p></div></li><li><p>把本地仓库的所有内容推送到远程库 project1 的 master 分支上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202062016970.png" alt="image-20220206201625887" width="1000"><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>注意 origin 后面的 master 有两层含义：</p><p>（1）本地仓库有一个 master 分支（前面提过<code>git init</code>命令会为我们自动创建一个 master 分支）</p><p>（2）告诉 Github 创建一个 master 分支，并与之关联</p><p>第一次推送时，需要加上了 <code>-u</code> 参数：Git 不但会把本地的 master 分支内容推送的远程新的master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202061812871.png" alt="image-20220206181216793" width="700"></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202071444265.png" alt="image-20220207144453082" width="800"><div class="custom-container warning"><p class="custom-container-title">Note</p><p>2020年 10 月 1 日之后，Github 将所有新建的仓库的默认主分支从 master 修改为 main</p></div></li></ol><p>至此，我们完成了使用 Git 与 GitHub 管理项目的简单操作。当我们再次在本地电脑对项目进行修改之后，比如我们修改了 Test.java 的信息：</p><p>:::: code-group</p><p>::: code-group-item 修改后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::: code-group-item 修改前</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::::</p><p>我们可以使用以下命令查看更改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果更改内容无误，只需要使用以下命令便可将更改信息推送到与之关联的 Github 仓库中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Test.java中增加了一句输出语句&quot;</span>
<span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202071606125.png" alt="image-20220207160641031" width="700"><hr><p>参考链接：</p>`,21),q={href:"https://stackoverflow.com/questions/65173291/git-push-error-src-refspec-main-does-not-match-any-on-linux",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"},T={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},H=t(`<h2 id="git-版本回退" tabindex="-1"><a class="header-anchor" href="#git-版本回退" aria-hidden="true">#</a> <a id="_link_git2">Git 版本回退</a></h2><p>有时候，当我们使用 Git 提交本地项目到 Github 仓库之后，发现提交的内容有误，希望恢复项目到之前的版本，此时，Git 版本回退可以帮助我们解决这一问题。</p><p>比如我们继续对 CodingLife 项目中的文件 <code>Test.java</code> 进行修改并提交到远程库：</p><p>:::: code-group</p><p>::: code-group-item 修改后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::: code-group-item 修改前</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::::</p><p>提交到远程库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;删除掉Test.java第一句输出语句&quot;</span>
<span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等第二天我们发现删除掉了重要的内容，我们希望恢复之前的内容，使用 Git 版本回退可以解决该问题，流程如下：</p><ol><li><p>查看提交日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091145176.png" alt="image-20220209114534068" width="600"><div class="custom-container info"><p class="custom-container-title">知识点</p><p>1、<code>git log</code> 命令会将提交信息串成一条时间线，这条时间线就是一个分支</p><p>2、<code>git log</code> 命令显示从最近到最远的提交日志，我们可以看到 3 次提交，最近的一次版本号是<code>421b0f...</code>，上一次版本号是<code>720e08...</code>，最早的一次版本号是<code>2c5ddd...</code></p><p>3、每一次提交有一个版本号 ID，是一个 SHA1 计算出来的一个用十六进制表示非常大的数字，上图版本号只是取了前几位数字</p></div><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091151916.png" alt="image-20220209115143732" loading="lazy"></p></li><li><p>选择回退的版本，这里选择回退上一个版本（过去版本）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
<span class="token comment"># 或者</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 720e08
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091158671.png" alt="image-20220209115811605" width="500"><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>1、<code>HEAD</code> 表示当前版本，<code>HEAD^</code> 表示上一个版本，<code>HEAD^^</code>表示上上一个版本，以此类推</p><p>2、<code>--hard</code> 后面也可加想要回退版本的版本号前几位来回退到具体的版本</p></div><p>当版本回退之后，我们在看 Test.java 代码，发现已经回退到了修改前的代码。</p><p>:::: code-group</p><p>::: code-group-item 回退后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::: code-group-item 回退前</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::::</p></li><li><p>回退未来版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们回退到某一个版本之后（我们暂且称其为当前版本），再次使用 <code>git log</code> 命令，显示的最近一次的版本号为当前版本，即上图版本号为<code>720e08...</code>的版本。如果我们某一天后悔之前使用 git 做的回退操作了，想恢复到版本号为<code>421b0f...</code>的版本，却忘记了该版本号，则需要使用<code>git reflog</code>命令来查询具体要恢复到哪一个版本对应的版本号</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091534894.png" alt="image-20220209153455801" width="700"><p><code>git reflog</code> 命令会将每一次 git 命令操作记录下来，用来查看历史命令，而 <code>git log</code>命令只查看历史提交命令</p><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091748135.png" alt="image-20220209174804027" loading="lazy"></p></li></ol><h2 id="git-创建与合并分支" tabindex="-1"><a class="header-anchor" href="#git-创建与合并分支" aria-hidden="true">#</a> Git 创建与合并分支</h2><p>在<a href="#_link_git2">Git 版本回退</a>里，我们知道 Git 会把每一次提交信息串成一条时间线，这条时间线就是一个分支。在 Git 中，创建、合并和删除分支非常快，所以 Git 鼓励我们使用分支完成某些任务，任务完成之后合将内容并到主分支，之后再删掉分支，这和直接在 <code>master</code> 分支上工作效果是一样的，但过程更安全。</p><p>在 CodingLife 项目下分支的创建合并删除流程如下：</p><ol><li><p>创建分支 dev 并切换到 dev 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091619065.png" alt="image-20220209161901971" width="600"><p>我们可以看到，创建一个<code>dev</code>分支其实是相当于：新建一个指针 <code>dev</code>，该指针指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上</p><div class="custom-container info"><p class="custom-container-title">知识点</p><p>1、以上命令可以拆解成两条命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch dev    <span class="token comment"># 创建 dev 分支</span>
<span class="token function">git</span> checkout dev  <span class="token comment"># 切换到 dev 分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、可以查看当前分支情况，&quot;*&quot; 号表示当前分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wyj_p@DESKTOP-OHURAP1 MINGW32 /d/CodingLife <span class="token punctuation">(</span>dev<span class="token punctuation">)</span>
$ <span class="token function">git</span> branch
* dev
  master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></li><li><p>在 dev 分支上修改内容并提交</p><p>我们继续对 CodingLife 项目的<code>Test.java</code> 文件进行修改（增加一行输出语句），不同的是现在是在 dev 分支上，而不是在 master 分支：</p><p>:::: code-group</p><p>::: code-group-item 修改后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;dev 分支新写了一行输出代码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::: code-group-item 修改前</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>::::</p><p>修改之后提交：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;dev branch change Test.java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091734482.png" alt="image-20220209173413388" width="600"><p>在 dev 分支下查看 <code>Test.java</code> 内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> Test.java
public class Test <span class="token punctuation">{</span>
    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System.out.println<span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System.out.println<span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System.out.println<span class="token punctuation">(</span><span class="token string">&quot;dev 分支新写了一行输出代码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 master 分支的内容停留在了版本号为 <code>421b0f</code>位置处，可以切换到 master 分支查看 Test.java 内容:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master <span class="token comment"># 切换到 master 分支</span>
$ <span class="token function">cat</span> Test.java     <span class="token comment"># 打开 Test.java 文件</span>
public class Test <span class="token punctuation">{</span>
    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System.out.println<span class="token punctuation">(</span><span class="token string">&quot;编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System.out.println<span class="token punctuation">(</span><span class="token string">&quot;增加一行输出——编码人生-bmrs.top&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>合并 dev 分支内容到 master 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master <span class="token comment"># 切换到 master 分支</span>
<span class="token function">git</span> merge dev       <span class="token comment"># 将 dev 分支内容合并到 master 分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091804532.png" alt="image-20220209180441432" width="700"><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091754649.png" alt="image-20220209175445533" loading="lazy"></p></li><li><p>合并完成，删除 dev 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev <span class="token comment"># 删除 dev 分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202091805571.png" alt="image-20220209180558482" width="700"></li></ol><h2 id="使用-git-克隆-github-仓库项目" tabindex="-1"><a class="header-anchor" href="#使用-git-克隆-github-仓库项目" aria-hidden="true">#</a> 使用 Git 克隆 Github 仓库项目</h2><p>使用 Git 不仅可以将我们的本地代码提交到 Github 仓库，同时也可以通过 Git 把 Github 上的项目克隆到本地。我们已经学会了<a href="#_link_git1">如何在 Github 上发现优秀的开源项目</a>，比如此时你在 Github 上找到了一个好的开源项目，存储库在 <strong>CodingLifeVV/hello-world</strong> 下，克隆该仓库内容流程如下</p><ol><li><p>在本地电脑上新建一个本地存储库，初始化为一个本地仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>进入该存储库文件夹内，使用 <code>git clone</code> 命令克隆 Github 仓库内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:CodingLifeVV/hello-world.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>git clone</code> 命令后为远程仓库地址：</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202090959495.png" alt="image-20220209095952409" width="400"><p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/202202090955944.png" alt="image-20220209095545831" loading="lazy"></p></li></ol><h2 id="master-分支内容推送到其他分支" tabindex="-1"><a class="header-anchor" href="#master-分支内容推送到其他分支" aria-hidden="true">#</a> master 分支内容推送到其他分支</h2><p>将 master 分支内容推送到其它分支上，以 dev 分支为例，步骤如下：</p><ol><li><p>查看分支日志，记录 master 分支想要推送的版本号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到 master 分支</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 查看master分支提交日志</span>
<span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交日志：</p><img src="https://eduimage1.oss-cn-beijing.aliyuncs.com/img/image-20220411151632905.png" alt="image-20220411151632905"></li><li><p>切换到 dev 分支，拉取代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换分支</span>
<span class="token function">git</span> checkout dev
<span class="token comment"># 拉取代码</span>
<span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将 master 分支内容推送到 dev分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick 5f640689ac75a31400a1a7b5f2c208be311e5586
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,25);function C(L,D){const a=o("ExternalLinkIcon");return p(),c("div",null,[u,d,r,s("p",null,[n("版本控制系统 Git 很好的解决了以上难题，要想使用 Git 进行一些列操作，首先要下载安装最近版本的 Git "),s("a",m,[n("Git - Downloads (git-scm.com)"),e(a)])]),g,v,s("ol",null,[s("li",null,[k,s("div",b,[h,f,y,s("p",null,[n("2、配置 Git 时你需要注册一个 Github 账户"),s("a",_,[n("Join GitHub · GitHub"),e(a)]),n("（或者是Gitee、Gitlab），其中 "),s("a",w,[n("user.name"),e(a)]),n(" 是你 Github 的用户名，user.email 是你注册 Github 使用的邮箱")]),j])]),G]),x,s("ul",null,[s("li",null,[s("a",q,[n("master分支与主分支的区别"),e(a)])]),s("li",null,[s("a",S,[n("Git教程"),e(a)])]),s("li",null,[s("a",T,[n("Git 官方文档"),e(a)])])]),H])}const V=i(l,[["render",C],["__file","git.html.vue"]]);export{V as default};
